[{"content":" 활용 가이드 튜토리얼 사용자 매뉴얼 운영 가이드 Linux/UNIX 리눅스/유닉스용 에이전트 설치 리눅스/유닉스용 에이전트 삭제 Windows 윈도우즈용 에이전트 설치 윈도우즈용 에이전트 삭제 다운로드 주의 : 마스터의 버전이 V1.0인 경우에만 아래 에이전트를 설치하시기 바랍니다.\nOPMATE Agent v1.0.009 opma-inst-1.0.009-20191216.tar.gz CentOS 7/6/5 - x86_64bit AIX 7.2/7.1/6.1/5.3 - ppc_64bit Solaris 10/9 - sparc_64bit opma-inst-1.0.009-20191216.exe Windows Server 2016/2012/2008/2003 - x86_64bit / x86_32bit ","date":"2023-08-21","id":0,"permalink":"/hugo-test2/v10/about/","summary":"\u003chr\u003e\n\u003ch3 id=\"활용-가이드\"\u003e활용 가이드\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../tutorial/quicktutorial1\"\u003e튜토리얼\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../manual/manual\"\u003e사용자 매뉴얼\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"운영-가이드\"\u003e운영 가이드\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eLinux/UNIX\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../installagentlinux\"\u003e리눅스/유닉스용 에이전트 \u003cem\u003e설치\u003c/em\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../uninstallagentlinux\"\u003e리눅스/유닉스용 에이전트 \u003cem\u003e삭제\u003c/em\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWindows\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../installagentwindows\"\u003e윈도우즈용 에이전트 \u003cem\u003e설치\u003c/em\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../uninstallagentwindows\"\u003e윈도우즈용 에이전트 \u003cem\u003e삭제\u003c/em\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"다운로드\"\u003e다운로드\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e주의\u003c/strong\u003e : \u003cstrong\u003e마스터의 버전이 V1.0\u003c/strong\u003e인 경우에만 아래 에이전트를 설치하시기 바랍니다.\u003c/p\u003e","tags":[],"title":"시작하기"},{"content":" 활용 가이드 튜토리얼 사용자 매뉴얼 에이전트 설치 설치/제거 가이드 프로그램 설치 리눅스/유닉스용 에이전트 설치 윈도우즈용 에이전트 설치 프로그램 제거 리눅스/유닉스용 에이전트 제거 윈도우즈용 에이전트 제거 다운로드 주의 : 마스터의 버전이 V1.1인 경우에만 아래 에이전트를 설치하시기 바랍니다.\nOPMATE Agent v1.1.005 opma-inst-1.1.005-20230327.tar.gz RHEL 7/6/5 - x86_64bit AIX 7.2/7.1/6.1/5.3 - ppc_64bit Solaris 10/9 - sparc_64bit HP-UX B.11.23 - ia_64bit opma-inst-1.1.005-20230327.exe Windows Server 2016/2012/2008/2003 - x86_64bit / x86_32bit 지원 운영체제 Linux\nRHEL(CentOS) 8 (x86_64bit) RHEL(CentOS) 7 (x86_64bit) RHEL(CentOS) 6 (x86_64bit) RHEL(CentOS) 5 (x86_64bit) UNIX\nAIX 7.2 (ppc_64bit) AIX 7.1 (ppc_64bit) AIX 6.1 (ppc_64bit) AIX 5.3 (ppc_64bit) Solaris 10 (sparc_64bit) Solaris 9 (sparc_64bit) HP-UX B.11.23 (ia_64bit) Windows\nWindows Server 2022 (x86_64bit) Windows Server 2019 (x86_64bit) Windows Server 2016 (x86_64bit) Windows Server 2012 (x86_64bit) Windows Server 2008 (x86_64bit) Windows Server 2003 (x86_64bit / x86_32bit) ","date":"2023-08-21","id":1,"permalink":"/hugo-test2/v11/about/","summary":"\u003chr\u003e\n\u003ch3 id=\"활용-가이드\"\u003e활용 가이드\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../tutorial/quicktutorial1\"\u003e튜토리얼\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../manual/usermanual1\"\u003e사용자 매뉴얼\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"에이전트-설치\"\u003e에이전트 설치\u003c/h3\u003e\n\u003ch4 id=\"설치제거-가이드\"\u003e설치/제거 가이드\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e프로그램 설치\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../installagentlinux\"\u003e리눅스/유닉스용 에이전트 설치\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../installagentwindows\"\u003e윈도우즈용 에이전트 설치\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e프로그램 제거\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../uninstallagentlinux\"\u003e리눅스/유닉스용 에이전트 제거\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../uninstallagentwindows\"\u003e윈도우즈용 에이전트 제거\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"다운로드\"\u003e다운로드\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e주의\u003c/strong\u003e : \u003cstrong\u003e마스터의 버전이 V1.1\u003c/strong\u003e인 경우에만 아래 에이전트를 설치하시기 바랍니다.\u003c/p\u003e","tags":[],"title":"시작하기"},{"content":" 활용 가이드 OPMATE 사용자 튜토리얼\n에이전트 설치 설치/제거 가이드 프로그램 설치 리눅스용 에이전트 설치 윈도우즈용 에이전트 설치 프로그램 제거 리눅스용 에이전트 제거 윈도우즈용 에이전트 제거 다운로드 준비중 지원 운영체제 Linux RHEL(CentOS) 8 (x86_64bit / arm_64bit) RHEL(CentOS) 7 (x86_64bit) RHEL(CentOS) 6 (x86_64bit) RHEL(CentOS) 5 (x86_64bit) Amazon Linux 2 (x86_64bit / arm_64bit) SUSE Linux Enterprise Server 15 SP2 (x86_64bit / arm_64bit) Ubuntu Server 20.04 (x86_64bit / arm_64bit) Debian 10 (x86_64bit / arm_64bit) Oracle Linux 8.3 (x86_64bit)\tWindows Windows Server 2022 (x86_64bit) Windows Server 2019 (x86_64bit) Windows Server 2016 (x86_64bit) Windows Server 2012 (x86_64bit) Windows Server 2008 (x86_64bit) ","date":"2023-08-21","id":2,"permalink":"/hugo-test2/v2/about/","summary":"\u003chr\u003e\n\u003ch3 id=\"활용-가이드\"\u003e활용 가이드\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"../tutorial/tutorial1\"\u003eOPMATE 사용자 튜토리얼\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"에이전트-설치\"\u003e에이전트 설치\u003c/h3\u003e\n\u003ch4 id=\"설치제거-가이드\"\u003e설치/제거 가이드\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e프로그램 설치\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../agentinstall#Linux\"\u003e리눅스용 에이전트 설치\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../agentinstall#Windows\"\u003e윈도우즈용 에이전트 설치\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e프로그램 제거\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../agentuninstall#Linux\"\u003e리눅스용 에이전트 제거\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../agentuninstall#Windows\"\u003e윈도우즈용 에이전트 제거\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"다운로드\"\u003e다운로드\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e준비중\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!--\n**주의** : **마스터의 버전이 V2.0**인 경우에만 아래 에이전트를 설치하시기 바랍니다.\n\n- **OPMATE Agent _v2.0.004_**\n  - [opma-installer-2.0.004-linux-20211230.tar.gz](https://github.com/opmate/opmate.github.io/releases/download/OPMATE-AGENT-v2.0.004/opma-installer-2.0.004-linux-20211230.tar.gz)\n  - [opma-installer-2.0.004-windows-20211230.exe](https://github.com/opmate/opmate.github.io/releases/download/OPMATE-AGENT-v2.0.004/opma-installer-2.0.004-windows-20211230.exe)\n--\u003e\n\u003ch3 id=\"지원-운영체제\"\u003e지원 운영체제\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eLinux\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eRHEL(CentOS) 8 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eRHEL(CentOS) 7 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eRHEL(CentOS) 6 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eRHEL(CentOS) 5 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eAmazon Linux 2 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eSUSE Linux Enterprise Server 15 SP2 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eUbuntu Server 20.04 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eDebian 10 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eOracle Linux 8.3 (x86_64bit)\t\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eWindows\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2022 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2019 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2016 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2012 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2008 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","tags":[],"title":"시작하기"},{"content":" OPMATE CLI 명령어의 형식은 다음과 같습니다:\n$ opmate \u0026lt;subject\u0026gt; \u0026lt;action\u0026gt; [\u0026lt;parameter\u0026gt;]\r또한, 각각의 명령어의 활용법이 궁금하다면,\n명령어 맨 뒤에 -h나 --help를 붙여 사용 가능한 명령어와 매뉴얼을 조회할 수 있습니다.\n# OPMATE CLI 가용 Subject 조회 $ opmate -h # OPMATE CLI 매뉴얼 조회 $ opmate --help # Subject에서 사용 가능한 Action 조회 $ opmate \u0026lt;subject\u0026gt; -h # Subject 매뉴얼 조회 $ opmate \u0026lt;subject\u0026gt; --help # Action에서 사용되는 파라미터 조회 $ opmate \u0026lt;subject\u0026gt; \u0026lt;action\u0026gt; -h # Action 매뉴얼 조회 $ opmate \u0026lt;subject\u0026gt; \u0026lt;action\u0026gt; --help\ropmate user login이란 명령어를 예시로 들어볼까요?\n명령어 맨 뒤에 -h를 추가로 입력하여 opmate user login의 사용법을 알아봅니다.\n$ opmate user login -h usage: opmate user login -id \u0026lt;user-id\u0026gt; parameters: -id,--id \u0026lt;user-id\u0026gt; 사용자 ID\r이 명령어를 사용하려면 사용자 ID(-id)라는 파라미터를 입력해야 함을 알 수 있습니다.\n","date":"0001-01-01","id":3,"permalink":"/hugo-test2/v2/tutorial/tutorial1/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eOPMATE CLI 명령어\u003c/strong\u003e의 형식은 다음과 같습니다:\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ opmate \u0026lt;subject\u0026gt; \u0026lt;action\u0026gt; \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u0026lt;parameter\u0026gt;\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e또한, 각각의 명령어의 활용법이 궁금하다면,\u003cbr\u003e\n명령어 맨 뒤에 \u003ccode\u003e-h\u003c/code\u003e나 \u003ccode\u003e--help\u003c/code\u003e를 붙여 사용 가능한 명령어와 매뉴얼을 조회할 수 있습니다.\u003c/p\u003e","tags":[],"title":"1. CLI 명령어"},{"content":"OPMATE CLI 명령어는 opmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; \u0026lt;arguments\u0026gt;의 형식으로 이루어져 있습니다. 가능한 파라미터와 설명을 보고 싶다면, 다음의 형식으로 마지막에 help를 붙여주면 됩니다.\n$ opmate help $ opmate \u0026lt;object\u0026gt; help $ opmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; help 다음은 활용 예제입니다.\nopmate에 어떤 \u0026lt;object\u0026gt;가 있는지 확인해 보겠습니다.\n$ opmate help usage: opmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; [\u0026lt;arguments\u0026gt;|help] [objects] user Operator or service account that uses OPMATE with given roles. usergroup Group of OPMATE users. node Agent-installed server that is subject to operations management. nodegroup Group of OPMATE nodes. task Unit in which content to be executed on nodes is created. taskinstance Details of the executed-task. Execution status, result check, rerun etc. approval Approval of the OPMATE Task. file File to receive or send from Master Repository. system OPMATE System Information.\ropmate user에 가능한 \u0026lt;action\u0026gt;은 무엇이 있을까요?\n$ opmate user help usage: opmate user \u0026lt;action\u0026gt; [\u0026lt;arguments\u0026gt;|help] [actions] list List information about users. view View user\u0026#39;s details. create Create user\u0026#39;s account. edit Edit user\u0026#39;s information. delete Delete user\u0026#39;s account. passwd Change or Set user\u0026#39;s password. login Create a user authentication session. logout Destroy a user authentication session.\ropmate user list에 상세한 인자(arguments)를 확인해 보겠습니다.\n$ opmate user list help usage: opmate user list [-id \u0026lt;substring\u0026gt;] [-nm \u0026lt;substring\u0026gt;] [-ro \u0026lt;role-num\u0026gt;] [-st \u0026lt;E|D\u0026gt;] [-lm \u0026lt;number\u0026gt;] [-of \u0026lt;number\u0026gt;] List information about users. -id,--id \u0026lt;substring\u0026gt; Filter by ID -nm,--name \u0026lt;substring\u0026gt; Filter by name -ro,--role \u0026lt;role-num\u0026gt; Filter by role * 0 : Administrator * 1 : Manager * 2 : Operator * 3 : Guest -st,--status \u0026lt;E|D\u0026gt; Filter by status : Enable/Disable -lm,--limit \u0026lt;number\u0026gt; Maximum number of rows -of,--offset \u0026lt;number\u0026gt; First row number, starting at 0\r","date":"0001-01-01","id":4,"permalink":"/hugo-test2/v11/tutorial/quicktutorial1/","summary":"\u003cp\u003eOPMATE CLI 명령어는 \u003ccode\u003eopmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; \u0026lt;arguments\u0026gt;\u003c/code\u003e의 형식으로 이루어져 있습니다. 가능한 파라미터와 설명을 보고 싶다면, 다음의 형식으로 마지막에 \u003ccode\u003ehelp\u003c/code\u003e를 붙여주면 됩니다.\u003c/p\u003e","tags":[],"title":"1. CLI 사용법"},{"content":"다음과 같이 나의 사용자 계정을 만듭니다. 사용자ID는 bumbee이고, 이름, 전화번호, 이메일 등을 입력합니다.\n$ opmate user create -id bumbee -nm \u0026#39;cutefly\u0026#39; -pn \u0026#39;010-2222-2222\u0026#39; -ea \u0026#39;bumbee@email.com\u0026#39; Requesting https://127.0.0.1:8443/opmate Enter password: Confirm password: bumbee has been created successfully.\r정상적으로 생성이 되었지만, 아직은 사용이 불가능합니다. 시스템관리자 권한을 가지고 있는 사용자에게 활성화를 요청합니다.\n시스템관리자(admin)는 당신의 요청을 듣고, 다음과 같이 사용자 목록을 조회해 봅니다.\n$ opmate user list Requesting https://127.0.0.1:8443/opmate;user=admin +--------+---------------+------+---------+------------------+ | ID | NAME | ROLE | STATUS | LAST LOGIN | +--------+---------------+------+---------+------------------+ | admin | lovelyhana | 0 | enable | 2020/03/13 14:07 | | oprim | smartsteel | 1 | enable | 2020/03/13 09:35 | | bumbee | cutefly | 3 | disable | 2020/03/11 15:12 | +--------+---------------+------+---------+------------------+ ROWS COUNT : 3/3\rbumbee라는 사용자가 추가된 것을 확인하고, 다음과 같은 명령으로 활성화 및 ROLE 2를 부여합니다. ROLE은 권한 레벨을 의미하며, 최소 2레벨이 되어야 각종 작업을 수행할 수 있습니다.\n$ opmate user edit -id bumbee -ro 2 -st E Requesting https://127.0.0.1:8443/opmate;user=admin bumbee has been modified successfully.\r자, 이제 bumbee로 로그인해볼까요?\n$ opmate user login -id bumbee Requesting https://127.0.0.1:8443/opmate Enter password: bumbee has been logged in successfully.\r","date":"0001-01-01","id":5,"permalink":"/hugo-test2/v11/tutorial/quicktutorial2/","summary":"\u003cp\u003e다음과 같이 나의 사용자 계정을 만듭니다. 사용자ID는 bumbee이고, 이름, 전화번호, 이메일 등을 입력합니다.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ opmate user create -id bumbee -nm \u003cspan class=\"s1\"\u003e\u0026#39;cutefly\u0026#39;\u003c/span\u003e -pn \u003cspan class=\"s1\"\u003e\u0026#39;010-2222-2222\u0026#39;\u003c/span\u003e -ea \u003cspan class=\"s1\"\u003e\u0026#39;bumbee@email.com\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eRequesting https://127.0.0.1:8443/opmate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEnter password: \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eConfirm password: \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebumbee has been created successfully.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e정상적으로 생성이 되었지만, 아직은 사용이 불가능합니다.\n시스템관리자 권한을 가지고 있는 사용자에게 활성화를 요청합니다.\u003c/p\u003e","tags":[],"title":"2. 계정 생성 및 로그인"},{"content":"파일 준비 최신 버전의 설치 파일을 준비합니다.(e.g. opma-inst-1.0.001-20190425.tar.gz)\n$ ls opma-inst-1.0.001-20190425.tar.gz\rroot 로 로그인 $ su -\r압축 해제 및 인스톨러 실행 $ gunzip opma-inst-1.0.001-20190425.tar.gz $ tar -xvf opma-inst-1.0.001-20190425.tar $ cd opma-inst-1.0.001-20190425 $ ./install.sh\r입력 설치할 경로를 입력하고, 출력되는 내용을 확인 후 설치를 진행합니다.\nInput installation directory (ex. /infsw/opma) : /infsw/opma ... Input \u0026#39;yes\u0026#39; to proceed installation : yes\r설정 파일 수정 설치된 디렉토리의 설정 파일(e.g. /infsw/opma/cfg/agent.conf)을 열고,\n라인별 맨 앞의 주석표기(#기호)를 삭제하고 올바른 마스터서버의 접속 정보(ex. 10.0.0.1)로 수정합니다.\n$ vi /infsw/opma/cfg/agent.conf master_ip = 10.0.0.1 master_port = 34813\r자동 실행 설정 인스톨러의 안내에 따라, OS 별로 다음과 같이 입력하여 OS 부팅시 자동으로 시작되도록 설정합니다.\nCentOS 7.x 기준\n$ systemctl enable opmagent\rCentOS 6.x/5.x 기준\n$ chkconfig --add opmagent\rAIX 기준\n$ ln -s /etc/rc.d/init.d/opmagent /etc/rc.d/rc2.d/S99opmagent $ ln -s /etc/rc.d/init.d/opmagent /etc/rc.d/rc2.d/K01opmagent\r구동 인스톨러의 안내에 따라, OS별로 다음과 같이 입력하여 구동합니다.\n구동 후 로그 파일 (e.g. /infsw/opma/log/opm-agent.log) 을 확인하여 에러없이 정상적으로 시작되었는지 확인합니다.\nCentOS 7.x 기준\n$ systemctl start opmagent\rCentOS 6.x/5.x 기준\n$ service opmagent start\rAIX 기준\n$ /infsw/opma/bin/start.sh\r주의사항 에이전트는 각각 고유의 GUID를 가지고 있습니다. 이미 에이전트가 설치되어 있는 VM을 복제하여 생성하거나 또는 설치된 에이전트를 복사하여 설치할 경우 에이전트의 GUID도 복제되어 오동작이 발생하게 됩니다. 복제된 에이전트는 삭제(디렉토리 전체 삭제)하시고 재설치하시기 바랍니다. 삭제하지 않고 재설치할 경우에는 업데이트로 인식하기 때문에 GUID를 새로 받을수 없습니다.\n","date":"0001-01-01","id":6,"permalink":"/hugo-test2/v10/installagentlinux/","summary":"\u003ch2 id=\"파일-준비\"\u003e파일 준비\u003c/h2\u003e\n\u003cp\u003e최신 버전의 설치 파일을 준비합니다.(e.g. opma-inst-1.0.001-20190425.tar.gz)\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ls\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopma-inst-1.0.001-20190425.tar.gz\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"root-로-로그인\"\u003eroot 로 로그인\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ su -\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"압축-해제-및-인스톨러-실행\"\u003e압축 해제 및 인스톨러 실행\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ gunzip opma-inst-1.0.001-20190425.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ tar -xvf opma-inst-1.0.001-20190425.tar\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e opma-inst-1.0.001-20190425\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./install.sh\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"입력\"\u003e입력\u003c/h2\u003e\n\u003cp\u003e설치할 경로를 입력하고, 출력되는 내용을 확인 후 설치를 진행합니다.\u003c/p\u003e","tags":[],"title":"에이전트 설치 (Linux, UNIX)"},{"content":" 파일 준비 최신 버전의 설치 파일을 준비합니다.(e.g. opma-inst-1.1.005-20230327.tar.gz)\n$ ls opma-inst-1.1.005-20230327.tar.gz\rroot 로 로그인 $ su -\r압축 해제 및 인스톨러 실행 $ gunzip opma-inst-1.1.005-20230327.tar.gz $ tar -xvf opma-inst-1.1.005-20230327.tar $ cd opma-inst-1.1.005-20230327 $ ./install.sh\r입력 설치할 경로를 입력하고, 출력되는 내용을 확인 후 설치를 진행합니다.\nInput installation directory (ex. /infsw/opma) : /infsw/opma ... Input \u0026#39;yes\u0026#39; to proceed installation : yes\r설정 파일 수정 설치된 디렉토리의 설정 파일(e.g. /infsw/opma/cfg/agent.conf)을 열고,\n다음 예와 같이 올바른 마스터서버의 접속 정보로 수정합니다.\n$ vi /infsw/opma/cfg/agent.conf master_ip = 127.0.0.1 master_port = 34813\r구동 인스톨러의 안내에 따라, OS별로 다음과 같이 입력하여 구동합니다.\n구동 후 로그 파일 (e.g. /infsw/opma/log/opm-agent.log) 을 확인하여 에러없이 정상적으로 시작되었는지 확인합니다.\nCentOS 7.x 기준\n$ systemctl start opmagent\rCentOS 6.x/5.x 기준\n$ service opmagent start\rAIX/SunOS/HP-UX 기준\n$ /infsw/opma/bin/start.sh\r주의사항 에이전트는 각각 고유의 GUID를 가지고 있습니다. 이미 에이전트가 설치되어 있는 VM을 복제하여 생성하거나 또는 설치된 에이전트를 복사하여 설치할 경우 에이전트의 GUID도 복제되어 오동작이 발생하게 됩니다. 복제된 에이전트는 삭제(디렉토리 전체 삭제)하시고 재설치하시기 바랍니다. 삭제하지 않고 재설치할 경우에는 업데이트로 인식하기 때문에 GUID를 새로 받을수 없습니다.\n","date":"0001-01-01","id":7,"permalink":"/hugo-test2/v11/installagentlinux/","summary":"\u003chr\u003e\n\u003ch2 id=\"파일-준비\"\u003e파일 준비\u003c/h2\u003e\n\u003cp\u003e최신 버전의 설치 파일을 준비합니다.(e.g. opma-inst-1.1.005-20230327.tar.gz)\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ls\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopma-inst-1.1.005-20230327.tar.gz\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"root-로-로그인\"\u003eroot 로 로그인\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ su -\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"압축-해제-및-인스톨러-실행\"\u003e압축 해제 및 인스톨러 실행\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ gunzip opma-inst-1.1.005-20230327.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ tar -xvf opma-inst-1.1.005-20230327.tar\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e opma-inst-1.1.005-20230327\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./install.sh\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"입력\"\u003e입력\u003c/h2\u003e\n\u003cp\u003e설치할 경로를 입력하고, 출력되는 내용을 확인 후 설치를 진행합니다.\u003c/p\u003e","tags":[],"title":"에이전트 설치 (Linux, UNIX)"},{"content":"노드(Node)는 관리하고자 하는 호스트(Host)와 대응하는 개념입니다. 호스트(Host)에 에이전트를 설치 후 구동하면, 자동으로 노드가 마스터로 등록됩니다.\n우선, 노드의 목록을 조회해 보겠습니다.\n$ opmate node list Requesting https://127.0.0.1:8443/opmate;user=bumbee +----------------------------------+-----------+------------+-------+----------+-------+------------------+---------+ | ID | AGENT VER | CONNECT IP | OS | HOSTNAME | OWNER | HEARTBEAT | STATUS | +----------------------------------+-----------+------------+-------+----------+-------+------------------+---------+ | 3106E85BCF76465F8F9B16BC3873C380 | 1.1.002 | 10.0.0.92 | Linux | myhost2 | | 2020/03/13 14:10 | disable | | 6FE9E69A10B44EBEAFC3A9F05078066C | 1.1.002 | 10.0.0.91 | Linux | myhost1 | | 2020/03/13 14:10 | disable | +----------------------------------+-----------+------------+-------+----------+-------+------------------+---------+ ROWS COUNT : 2/2\r2개의 노드가 있는데, 상태(STATUS)가 비활성화(disable) 이네요. 소유자(OWNER)도 비어 있습니다. 정상적으로 사용하기 위해서는 활성화(enable)시켜야 합니다. 활성화하면서 너무 긴 ID도 줄여보겠습니다.\n$ opmate node edit -id 6FE9E69A10B44EBEAFC3A9F05078066C -wi linux01 -st E Requesting https://127.0.0.1:8443/opmate;user=bumbee 6FE9E69A10B44EBEAFC3A9F05078066C has been modified successfully. $ opmate node edit -id 3106E85BCF76465F8F9B16BC3873C380 -wi linux02 -st E Requesting https://127.0.0.1:8443/opmate;user=bumbee 3106E85BCF76465F8F9B16BC3873C380 has been modified successfully.\r다시 조회합니다.\n$ opmate node list Requesting https://127.0.0.1:8443/opmate;user=bumbee +---------+-----------+------------+-------+----------+--------+------------------+--------+ | ID | AGENT VER | CONNECT IP | OS | HOSTNAME | OWNER | HEARTBEAT | STATUS | +---------+-----------+------------+-------+----------+--------+------------------+--------+ | linux02 | 1.1.002 | 10.0.0.92 | Linux | myhost2 | bumbee | 2020/03/13 14:15 | enable | | linux01 | 1.1.002 | 10.0.0.91 | Linux | myhost1 | bumbee | 2020/03/13 14:15 | enable | +---------+-----------+------------+-------+----------+--------+------------------+--------+ ROWS COUNT : 2/2\r노드가 활성화 되었고 ID도 사용하기 편하도록 짧게 바뀌었습니다. 소유자(OWNER)는 bumbee가 되었네요.\n","date":"0001-01-01","id":8,"permalink":"/hugo-test2/v11/tutorial/quicktutorial3/","summary":"\u003cp\u003e노드(Node)는 관리하고자 하는 호스트(Host)와 대응하는 개념입니다.\n호스트(Host)에 에이전트를 설치 후 구동하면, 자동으로 노드가 마스터로 등록됩니다.\u003c/p\u003e\n\u003cp\u003e우선, 노드의 목록을 조회해 보겠습니다.\u003c/p\u003e","tags":[],"title":"3. 노드 활성화"},{"content":" 에이전트가 /infsw/opma 디렉토리에 설치되어 있다고 가정하였습니다. 실제 설치된 경로에 따라 진행하시기 바랍니다.\nroot로 로그인 $ su -\r에이전트 중지 실행중인 에이전트를 중지시킵니다.\nCentOS 7.x 기준 $ systemctl stop opmagent\rCentOS 6.x/5.x 기준 $ service opmagent stop\rAIX 기준 $ /infsw/opma/bin/stop.sh\r중지 상태 확인 $ ps -ef | grep opmagent\r서비스에서 제거 CentOS 7.x 기준 $ systemctl disable opmagent $ rm /etc/systemd/system/opmagent.service\rCentOS 6.x/5.x 기준 $ chkconfig --del opmagent $ rm /etc/init.d/opmagent\rAIX 기준 $ rm /etc/rc.d/rc2.d/S99opmagent $ rm /etc/rc.d/rc2.d/K01opmagent $ rm /etc/rc.d/init.d/opmagent\r파일 삭제 에이전트가 설치된 디렉토리 전체를 삭제합니다.\n$ rm -rf /infsw/opma $ rm -f /usr/bin/opmfget $ rm -f /usr/bin/opmfput $ rm -f /usr/bin/opmfls\r","date":"0001-01-01","id":9,"permalink":"/hugo-test2/v10/uninstallagentlinux/","summary":"\u003chr\u003e\n\u003cp\u003e에이전트가 \u003cstrong\u003e/infsw/opma\u003c/strong\u003e 디렉토리에 설치되어 있다고 가정하였습니다. 실제 설치된 경로에 따라 진행하시기 바랍니다.\u003c/p\u003e\n\u003ch2 id=\"root로-로그인\"\u003eroot로 로그인\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ su -\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"에이전트-중지\"\u003e에이전트 중지\u003c/h2\u003e\n\u003cp\u003e실행중인 에이전트를 중지시킵니다.\u003c/p\u003e","tags":[],"title":"에이전트 삭제 (Linux, UNIX)"},{"content":"에이전트가 /infsw/opma 디렉토리에 설치되어 있다고 가정하였습니다. 실제 설치된 경로에 따라 진행하시기 바랍니다.\nroot로 로그인 $ su -\r에이전트 중지 실행중인 에이전트를 중지시킵니다.\nCentOS 7.x 기준 $ systemctl stop opmagent\rCentOS 6.x/5.x 기준 $ service opmagent stop\rAIX/SunOS/HP-UX 기준 $ /infsw/opma/bin/stop.sh\r중지 상태 확인 $ ps -ef | grep opmagent\r서비스에서 제거 CentOS 7.x 기준 $ systemctl disable opmagent $ rm /etc/systemd/system/opmagent.service\rCentOS 6.x/5.x 기준 $ chkconfig --del opmagent $ rm /etc/init.d/opmagent\rAIX 기준 $ rm /etc/rc.d/rc2.d/S99opmagent $ rm /etc/rc.d/rc2.d/K01opmagent $ rm /etc/rc.d/init.d/opmagent\rSunOS 기준 $ rm /etc/rc3.d/S99opmagent $ rm /etc/rc3.d/K01opmagent $ rm /etc/init.d/opmagent\rHP-UX 기준 $ rm /sbin/rc2.d/S999opmagent $ rm /sbin/rc2.d/K001opmagent $ rm /sbin/init.d/opmagent\r파일 삭제 에이전트가 설치된 디렉토리 전체를 삭제합니다.\n$ rm -rf /infsw/opma $ rm -f /usr/bin/opmfget $ rm -f /usr/bin/opmfput $ rm -f /usr/bin/opmfls\r","date":"0001-01-01","id":10,"permalink":"/hugo-test2/v11/uninstallagentlinux/","summary":"\u003cp\u003e에이전트가 \u003cstrong\u003e/infsw/opma\u003c/strong\u003e 디렉토리에 설치되어 있다고 가정하였습니다. 실제 설치된 경로에 따라 진행하시기 바랍니다.\u003c/p\u003e\n\u003ch2 id=\"root로-로그인\"\u003eroot로 로그인\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ su -\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"에이전트-중지\"\u003e에이전트 중지\u003c/h2\u003e\n\u003cp\u003e실행중인 에이전트를 중지시킵니다.\u003c/p\u003e","tags":[],"title":"에이전트 삭제 (Linux, UNIX)"},{"content":"에이전트가 설치된 노드에 명령을 실행하기 위해서, 태스크(Task)를 정의해야 합니다.\n먼저, 스크립트 파일을 만듭니다.\n$ vi diskusage.sh #!/bin/sh df -h\rdiskusage라는 ID로 태스크를 생성합니다. 위에서 만든 쉘스크립트 파일의 경로를 주고, 호스트(Host)에서 실행할 OS 사용자명은 root로 지정합니다. 또한, 온디맨드 방식으로 실행할 수 있도록, '-eo E' 옵션도 추가합니다.\n$ opmate task create -id diskusage -sf ./diskusage.sh -ou root -eo E Requesting https://127.0.0.1:8443/opmate;user=bumbee diskusage has been created successfully.\r생성한 태스크가 어떤 노드에서 실행될지 타겟노드(Target Node)를 지정해야 합니다. 2개 노드에서 실행되도록 다음과 같이 입력합니다.\n$ opmate task addtarget -id diskusage -nd linux01 Requesting https://127.0.0.1:8443/opmate;user=bumbee linux01 has been added to target successfully. $ opmate task addtarget -id diskusage -nd linux02 Requesting https://127.0.0.1:8443/opmate;user=bumbee linux02 has been added to target successfully.\r태스크가 잘 생성되었는지 확인해 보겠습니다. 태스크가 많으면 목록이 너무 길어질테니, 소유자(OWNER)가 bumbee인 태스크만 조회해 봅니다.\n$ opmate task list -oi bumbee Requesting https://127.0.0.1:8443/opmate;user=bumbee +-----------+------+--------+--------------+---------+-----------+ | ID | REV. | OWNER | SCRIPT | OS USER | NEXT TASK | +-----------+------+--------+--------------+---------+-----------+ | diskusage | 0 | bumbee | diskusage.sh | root | | +-----------+------+--------+--------------+---------+-----------+ ROWS COUNT : 1/1\r조금 더 자세히 볼까요?\n$ opmate task view -id diskusage Requesting https://127.0.0.1:8443/opmate;user=bumbee +------------------+------------------+ | FIELD | VALUE | +------------------+------------------+ | [BASIS] | | | | | | ID | diskusage | | REVISION | 0 | | OWNER | bumbee | | SCRIPT | diskusage.sh | | OS USER | root | | BY SCHEDULER | disable | | BY ONDEMAND | enable | | BY TASK | disable | | NEXT TASK | | | DESCRIPTION | | | CREATED AT | 2020/03/14 14:01 | | CREATED BY | bumbee | | UPDATED AT | 2020/03/14 14:01 | | UPDATED BY | bumbee | | | | | [APPROVAL] | | | | | | STATUS | N/A | | REQ REASON | | | RJT REASON | | | APPROVER | | | UPDATED AT | 2020/03/14 14:01 | | | | | [SCHEDULES] | | | | | | [RUNNERS] | | | | | | [TARGETS] | | | | linux01(Node) | | | linux02(Node) | +------------------+------------------+\r잘 생성되었지만 아직 아니랍니다. 리비젼(REVISION) 번호가 0인 것과 승인상태(APPROVAL STATUS)가 N/A인 것에 주목하세요. 태스크는 승인을 받아야 실제로 실행할 수 있습니다.\n","date":"0001-01-01","id":11,"permalink":"/hugo-test2/v11/tutorial/quicktutorial4/","summary":"\u003cp\u003e에이전트가 설치된 노드에 명령을 실행하기 위해서, 태스크(Task)를 정의해야 합니다.\u003c/p\u003e\n\u003cp\u003e먼저, 스크립트 파일을 만듭니다.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ vi diskusage.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#!/bin/sh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edf -h\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003ediskusage\u003c/code\u003e라는 ID로 태스크를 생성합니다.\n위에서 만든 쉘스크립트 파일의 경로를 주고, 호스트(Host)에서 실행할 OS 사용자명은 root로 지정합니다.\n또한, 온디맨드 방식으로 실행할 수 있도록, \u003ccode\u003e'-eo E'\u003c/code\u003e 옵션도 추가합니다.\u003c/p\u003e","tags":[],"title":"4. 태스크 정의"},{"content":" 파일 준비 최신 버전의 설치 파일(e.g. opma-inst-1.0.001-20190425.exe)을 준비하여 C:\\ 에 복사합니다.\n명령 프롬프트 실행 실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 실행한 후, 설치파일이 존재하는 디렉토리로 이동합니다.\nC:\\Users\\Administrator\u0026gt; cd /d C:\\ C:\\\u0026gt; dir *.exe opma-inst-1.0.001-20190425.exe\r압축 해제 및 인스톨러 실행 C:\\\u0026gt; opma-inst-1.0.001-20190425.exe C:\\\u0026gt; cd opma-inst-1.0.001-20190425 C:\\opma-inst-1.0.001-20190425\u0026gt; install.bat\r입력 설치할 경로를 입력하고, 출력되는 내용을 확인 후 설치를 진행합니다.\nInput installation directory (ex. C:\\infsw\\opma) : C:\\infsw\\opma ... Input \u0026#39;yes\u0026#39; to proceed installation : yes\r설정 파일 수정 실행 메뉴에서 wordpad 를 입력하여 워드패드를 실행한 후 에이전트가 설치된 디렉토리의 설정 파일(e.g. C:\\infsw\\opma\\cfg\\agent.conf)을 편집합니다. 라인별 맨 앞의 주석(#기호) 제거하고 올바른 마스터서버의 접속 정보(ex. 10.0.0.1)로 수정합니다.\nmaster_ip = 10.0.0.1 master_port = 34813\r자동 실행 설정 인스톨러의 안내에 따라, 다음과 같이 입력하여 OS 부팅시 자동으로 시작되도록 설정합니다.\n(주의) \u0026ldquo;start=\u0026rdquo; 와 \u0026ldquo;auto\u0026rdquo; 사이에 공백이 하나 있습니다.\nC:\\ sc config \u0026#34;OpMate Agent Service\u0026#34; start= auto\r구동 인스톨러의 안내에 따라, 다음과 같이 입력하여 구동합니다.\n구동 후 로그 파일 (e.g. C:\\infsw\\opma\\log\\opm-agent.log) 을 확인하여 에러없이 정상적으로 시작되었는지 확인합니다.\nC:\\ sc start \u0026#34;OpMate Agent Service\u0026#34;\r주의사항 에이전트는 각각 고유의 GUID를 가지고 있습니다. 이미 에이전트가 설치되어 있는 VM을 복제하여 생성하거나 또는 설치된 에이전트를 복사하여 설치할 경우 에이전트의 GUID도 복제되어 오동작이 발생하게 됩니다. 복제된 에이전트는 삭제(디렉토리 전체 삭제)하시고 재설치하시기 바랍니다. 삭제하지 않고 재설치할 경우에는 업데이트로 인식하기 때문에 GUID를 새로 받을수 없습니다.\n","date":"0001-01-01","id":12,"permalink":"/hugo-test2/v10/installagentwindows/","summary":"\u003chr\u003e\n\u003ch2 id=\"파일-준비\"\u003e파일 준비\u003c/h2\u003e\n\u003cp\u003e최신 버전의 설치 파일(e.g. opma-inst-1.0.001-20190425.exe)을 준비하여 C:\\ 에 복사합니다.\u003c/p\u003e\n\u003ch2 id=\"명령-프롬프트-실행\"\u003e명령 프롬프트 실행\u003c/h2\u003e\n\u003cp\u003e실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 실행한 후, 설치파일이 존재하는 디렉토리로 이동합니다.\u003c/p\u003e","tags":[],"title":"에이전트 설치 (Windows)"},{"content":"파일 준비 최신 버전의 설치 파일(e.g. opma-inst-1.1.005-20230327.exe)을 준비하여 C:\\ 에 복사합니다.\n명령 프롬프트 실행 실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 관리자 권한으로 실행한 후, 설치파일이 존재하는 디렉토리로 이동합니다.\nC:\\Users\\Administrator\u0026gt; cd /d C:\\ C:\\\u0026gt; dir *.exe opma-inst-1.1.005-20230327.exe\r압축 해제 및 인스톨러 실행 C:\\\u0026gt; opma-inst-1.1.005-20230327.exe C:\\\u0026gt; cd opma-inst-1.1.005-20230327 C:\\opma-inst-1.1.005-20230327\u0026gt; install.bat\r입력 설치할 경로를 입력하고, 출력되는 내용을 확인 후 설치를 진행합니다.\nInput installation directory (ex. C:\\infsw\\opma) : C:\\infsw\\opma ... Input \u0026#39;yes\u0026#39; to proceed installation : yes\r설정 파일 수정 실행 메뉴에서 wordpad 를 입력하여 워드패드를 실행한 후 에이전트가 설치된 디렉토리의 설정 파일(e.g. C:\\infsw\\opma\\cfg\\agent.conf)을 편집합니다. 다음 예와 같이 올바른 마스터서버의 접속 정보로 수정합니다.\nmaster_ip = 127.0.0.1 master_port = 34813\r구동 인스톨러의 안내에 따라, 다음과 같이 입력하여 구동합니다.\n구동 후 로그 파일 (e.g. C:\\infsw\\opma\\log\\opm-agent.log) 을 확인하여 에러없이 정상적으로 시작되었는지 확인합니다.\nC:\\ sc start \u0026#34;OpMate Agent Service\u0026#34;\r주의사항 에이전트는 각각 고유의 GUID를 가지고 있습니다. 이미 에이전트가 설치되어 있는 VM을 복제하여 생성하거나 또는 설치된 에이전트를 복사하여 설치할 경우 에이전트의 GUID도 복제되어 오동작이 발생하게 됩니다. 복제된 에이전트는 삭제(디렉토리 전체 삭제)하시고 재설치하시기 바랍니다. 삭제하지 않고 재설치할 경우에는 업데이트로 인식하기 때문에 GUID를 새로 받을수 없습니다.\n","date":"0001-01-01","id":13,"permalink":"/hugo-test2/v11/installagentwindows/","summary":"\u003ch2 id=\"파일-준비\"\u003e파일 준비\u003c/h2\u003e\n\u003cp\u003e최신 버전의 설치 파일(e.g. opma-inst-1.1.005-20230327.exe)을 준비하여 C:\\ 에 복사합니다.\u003c/p\u003e\n\u003ch2 id=\"명령-프롬프트-실행\"\u003e명령 프롬프트 실행\u003c/h2\u003e\n\u003cp\u003e실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 관리자 권한으로 실행한 후, 설치파일이 존재하는 디렉토리로 이동합니다.\u003c/p\u003e","tags":[],"title":"에이전트 설치 (Windows)"},{"content":"신규로 생성한 태스크는 실행하기 위해서는 승인을 먼저 받아야 합니다. 승인은 승인권한을 가지고 있는 사용자만이 할 수 있습니다. 사용자 목록을 조회해보겠습니다.\n$ opmate user list Requesting https://127.0.0.1:8443/opmate;user=bumbee +--------+---------------+------+---------+------------------+ | ID | NAME | ROLE | STATUS | LAST LOGIN | +--------+---------------+------+---------+------------------+ | admin | lovelyhana | 0 | enable | 2020/03/13 14:07 | | oprim | smartsteel | 1 | enable | 2020/03/13 09:35 | | bumbee | cutefly | 2 | enable | 2020/03/11 15:12 | +--------+---------------+------+---------+------------------+ ROWS COUNT : 3/3\rROLE이 1 또는 0인 사용자가 승인 권한을 가지고 있습니다. 사용자 oprim에게 승인 요청을 하겠습니다.\n$ opmate approval request -id diskusage -ai oprim Requesting https://127.0.0.1:8443/opmate;user=bumbee diskusage\u0026#39;s approval has been requested successfully.\r사용자 oprim은 bumbee에게 태스크를 승인해달라고 얘기를 듣고, 다음과 같이 승인해야할 목록을 조회해 봅니다.\n$ opmate approval list Requesting https://127.0.0.1:8443/opmate;user=oprim +---------+-----------+--------+------------+------------------+ | TYPE | ID | OWNER | APPRV USER | APPRV UPDATED AT | +---------+-----------+--------+------------+------------------+ | Receive | diskusage | bumbee | oprim | 2020/03/14 14:10 | +---------+-----------+--------+------------+------------------+ ROWS COUNT : 1\rdiskusage라는 태스크가 목록에 있네요. 다음과 같이 태스크를 승인합니다.\n$ opmate approval accept -id diskusage Requesting https://127.0.0.1:8443/opmate;user=oprim diskusage has been approved successfully.\r다시, 태스크 내용을 상세히 보겠습니다.\n$ opmate task view -id diskusage Requesting https://127.0.0.1:8443/opmate;user=bumbee +------------------+------------------+ | FIELD | VALUE | +------------------+------------------+ | [BASIS] | | | | | | ID | diskusage | | REVISION | 1 | | OWNER | bumbee | | SCRIPT | diskusage.sh | | OS USER | root | | BY SCHEDULER | disable | | BY ONDEMAND | enable | | BY TASK | disable | | NEXT TASK | | | DESCRIPTION | | | CREATED AT | 2020/03/14 14:01 | | CREATED BY | bumbee | | UPDATED AT | 2020/03/14 14:01 | | UPDATED BY | bumbee | | | | | [APPROVAL] | | | | | | STATUS | approved | | REQ REASON | | | RJT REASON | | | APPROVER | oprim | | UPDATED AT | 2020/03/14 14:21 | | | | | [SCHEDULES] | | | | | | [RUNNERS] | | | | | | [TARGETS] | | | | linux01(Node) | | | linux02(Node) | +------------------+------------------+\r리비젼(REVISION)은 1로 바뀌어 있고, 승인상태(APPROVAL STATUS)도 승인(approved)으로 변경되었네요. 자, 이제 이 태스크를 실행할 준비가 되었습니다.\n","date":"0001-01-01","id":14,"permalink":"/hugo-test2/v11/tutorial/quicktutorial5/","summary":"\u003cp\u003e신규로 생성한 태스크는 실행하기 위해서는 승인을 먼저 받아야 합니다.\n승인은 승인권한을 가지고 있는 사용자만이 할 수 있습니다.\n사용자 목록을 조회해보겠습니다.\u003c/p\u003e","tags":[],"title":"5. 태스크 승인"},{"content":" 에이전트가 C:\\infsw\\opma 디렉토리에 설치되어 있다고 가정하였습니다. 실제 설치된 경로에 따라 진행하시기 바랍니다.\n명령 프롬프트 실행 실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 실행합니다.\nC:\\Users\\Administrator\u0026gt; 에이전트 중지 실행중인 에이전트를 중지시킵니다.\nC:\\Users\\Administrator\u0026gt; sc stop \u0026#34;OpMate Agent Service\u0026#34;\r중지 상태 확인 에이전트 상태를 확인하고, 상태가 \u0026ldquo;STOPPED\u0026rdquo; 인지 확인합니다.\nC:\\Users\\Administrator\u0026gt; sc query \u0026#34;OpMate Agent Service\u0026#34;\r서비스에서 제거 윈도우즈 서비스에 등록된 에이전트를 제거합니다.\nC:\\Users\\Administrator\u0026gt; sc delete \u0026#34;OpMate Agent Service\u0026#34;\r파일 삭제 에이전트가 설치된 디렉토리 전체를 삭제합니다.\nC:\\Users\\Administrator\u0026gt; rmdir /s /q C:\\infsw\\opma\r환경 변수 수정 시스템 변수의 수정 화면(제어판 -\u0026gt; 시스템 -\u0026gt; 고급 시스템 설정 -\u0026gt; 환경변수 -\u0026gt; 시스템 변수)을 열고, Path 항목의 변수값에서 에이전트의 실행 파일 경로(C:\\infsw\\opma\\bin)를 제거합니다.\n","date":"0001-01-01","id":15,"permalink":"/hugo-test2/v10/uninstallagentwindows/","summary":"\u003chr\u003e\n\u003cp\u003e에이전트가 \u003cstrong\u003eC:\\infsw\\opma\u003c/strong\u003e 디렉토리에 설치되어 있다고 가정하였습니다. 실제 설치된 경로에 따라 진행하시기 바랍니다.\u003c/p\u003e\n\u003ch2 id=\"명령-프롬프트-실행\"\u003e명령 프롬프트 실행\u003c/h2\u003e\n\u003cp\u003e실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 실행합니다.\u003c/p\u003e","tags":[],"title":"에이전트 삭제 (Windows)"},{"content":"에이전트가 C:\\infsw\\opma 디렉토리에 설치되어 있다고 가정하였습니다. 실제 설치된 경로에 따라 진행하시기 바랍니다.\n명령 프롬프트 실행 실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 관리자 권한으로 실행합니다.\nC:\\Users\\Administrator\u0026gt; 에이전트 중지 실행중인 에이전트를 중지시킵니다.\nC:\\Users\\Administrator\u0026gt; sc stop \u0026#34;OpMate Agent Service\u0026#34;\r중지 상태 확인 에이전트 상태를 확인하고, 상태가 \u0026ldquo;STOPPED\u0026rdquo; 인지 확인합니다.\nC:\\Users\\Administrator\u0026gt; sc query \u0026#34;OpMate Agent Service\u0026#34;\r서비스에서 제거 윈도우즈 서비스에 등록된 에이전트를 제거합니다.\nC:\\Users\\Administrator\u0026gt; sc delete \u0026#34;OpMate Agent Service\u0026#34;\r파일 삭제 에이전트가 설치된 디렉토리 전체를 삭제합니다.\nC:\\Users\\Administrator\u0026gt; rmdir /s /q C:\\infsw\\opma\r환경 변수 수정 시스템 변수의 수정 화면(제어판 -\u0026gt; 시스템 -\u0026gt; 고급 시스템 설정 -\u0026gt; 환경변수 -\u0026gt; 시스템 변수)을 열고, Path 항목의 변수값에서 에이전트의 실행 파일 경로(C:\\infsw\\opma\\bin)를 제거합니다.\n","date":"0001-01-01","id":16,"permalink":"/hugo-test2/v11/uninstallagentwindows/","summary":"\u003cp\u003e에이전트가 \u003cstrong\u003eC:\\infsw\\opma\u003c/strong\u003e 디렉토리에 설치되어 있다고 가정하였습니다. 실제 설치된 경로에 따라 진행하시기 바랍니다.\u003c/p\u003e\n\u003ch2 id=\"명령-프롬프트-실행\"\u003e명령 프롬프트 실행\u003c/h2\u003e\n\u003cp\u003e실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 관리자 권한으로 실행합니다.\u003c/p\u003e","tags":[],"title":"에이전트 삭제 (Windows)"},{"content":"드디어, 태스크 실행입니다.\n$ opmate task run -id diskusage Requesting https://127.0.0.1:8443/opmate;user=bumbee task-instance #234 has been created successfully.\r태스크를 한번 실행하면 그와 대응하는 태스크 인스턴스(Task Instance)가 만들어집니다. 위에서는 234으로 인스턴스가 생성되었고, 이 번호는 전체 태스크에서 고유한 번호입니다.\n태스크 diskusage의 인스턴스를 조회해보겠습니다.\n$ opmate taskinstance list -id diskusage Requesting https://127.0.0.1:8443/opmate;user=bumbee +------------------+-------------+---------------------+---------------------+--------------+---------+ | TASK INSTANCE NO | TASK ID | START AT | END AT | RUNNER | RESULT | +------------------+-------------+---------------------+---------------------+--------------+---------+ | 234 | diskusage | 2020/03/16 17:49:54 | 2020/03/16 17:50:07 | bumbee(User) | Success | +------------------+-------------+---------------------+---------------------+--------------+---------+ ROWS COUNT : 1/1\r태스크 실행한 모든 인스턴스를 목록에서 볼 수 있습니다. 인스턴스별 시작시간과(START AT)과 종료시간(END AT)이 출력되는데, 종료시간이 표시된다는 것은 태스크의 타겟 노드 전체가 완료되었다는 의미입니다. 단 한개의 노드라도 완료되지 않으면 표시되지 않습니다.\n이 인스턴스의 타겟 노드별 결과도 확인해보겠습니다.\n$ opmate taskinstance listnode -in 234 Requesting https://127.0.0.1:8443/opmate;user=bumbee +---------+---------+----------+---------------------+---------------------+---------+---------+ | NODE ID | EXEC NO | STATUS | START AT | END AT | RESULT | EXIT CD | +---------+---------+----------+---------------------+---------------------+---------+---------+ | linux01 | 1 | Complete | 2020/03/16 17:50:03 | 2020/03/16 17:50:03 | Success | 0 | | linux02 | 1 | Complete | 2020/03/16 17:50:03 | 2020/03/16 17:50:03 | Success | 0 | +---------+---------+----------+---------------------+---------------------+---------+---------+\r각 노드별로 진행상태 및 결과가 출력되는군요.\n하나의 노드를 지정해서 조금 더 상세히 조회해 보겠습니다.\n$ opmate taskinstance viewnode -in 234 -ni linux01 Requesting https://127.0.0.1:8443/opmate;user=bumbee +------------------+---------------------+ | FIELD | VALUE | +------------------+---------------------+ | TASK INSTANCE NO | 142 | | TASK ID | diskusage | | NODE ID | linux01 | | EXEC NO | 1 | | STATUS | Complete | | START AT | 2020/03/16 17:50:03 | | END AT | 2020/03/16 17:50:03 | | CREATED BY | bumbee(User) | | RESULT | Success | | EXIT CD | 0 | +------------------+---------------------+ [STDERR] No content. [STDOUT] Filesystem Size Used Avail Use% Mounted on /dev/mapper/centos-root 50G 1.3G 49G 3% / devtmpfs 486M 0 486M 0% /dev tmpfs 496M 0 496M 0% /dev/shm tmpfs 496M 6.6M 490M 2% /run tmpfs 496M 0 496M 0% /sys/fs/cgroup /dev/sda1 1014M 153M 862M 16% /boot /dev/mapper/centos-home 47G 101M 47G 1% /home tmpfs 100M 0 100M 0% /run/user/0\r스크립트의 실행결과인 표준에러와 표준출력을 확인할 수 있습니다.\n지금까지 간단한 예제를 통해 기초적인 이해와 사용 방법을 익히셨습니다. 실전에서 사용하기 위한 세부적인 내용은 사용자 매뉴얼를 참고하시기 바랍니다.\n","date":"0001-01-01","id":17,"permalink":"/hugo-test2/v11/tutorial/quicktutorial6/","summary":"\u003cp\u003e드디어, 태스크 실행입니다.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ opmate task run -id diskusage\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eRequesting https://127.0.0.1:8443/opmate\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003euser\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ebumbee\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etask-instance \u003cspan class=\"c1\"\u003e#234 has been created successfully.\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e태스크를 한번 실행하면 그와 대응하는 태스크 인스턴스(Task Instance)가 만들어집니다.\n위에서는 234으로 인스턴스가 생성되었고, 이 번호는 전체 태스크에서 고유한 번호입니다.\u003c/p\u003e","tags":[],"title":"6. 태스크 실행"},{"content":"\nOPMATE란? IT 인프라 운영 시 대량 단순 반복 작업을 자동으로 수행할 수 있는 운영 자동화 플랫폼입니다.\n이렇게 활용하세요 한 번의 명령으로 모든 서버의 디스크 사용률을 조사해 보세요.\n$ opmate execution run -ts diskusage\n소프트웨어 패치 파일을 일괄로 배포하세요.\n$ opmate execution run -ts downpatch -ag 'patch.tar.gz'\nVersions ","date":"2023-09-07","id":18,"permalink":"/hugo-test2/","summary":"\u003cbr\u003e\r\n\u003ch2 id=\"opmate란\"\u003eOPMATE란?\u003c/h2\u003e\n\u003cp\u003eIT 인프라 운영 시 대량 단순 반복 작업을 자동으로 수행할 수 있는 \u003cstrong\u003e운영 자동화 플랫폼\u003c/strong\u003e입니다.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003ch3 id=\"이렇게-활용하세요\"\u003e이렇게 활용하세요\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e한 번의 명령으로 모든 서버의 디스크 사용률을 조사해 보세요.\u003c/em\u003e\u003c/p\u003e","tags":[],"title":"OPMATE"},{"content":"","date":"2023-09-07","id":19,"permalink":"/hugo-test2/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-08-21","id":20,"permalink":"/hugo-test2/v10/","summary":"","tags":[],"title":"V10s"},{"content":"","date":"2023-08-21","id":21,"permalink":"/hugo-test2/v11/","summary":"","tags":[],"title":"V11s"},{"content":" Linux\rWindows\r파일 준비 최신 버전의 설치 파일을 준비합니다.(e.g. opm-agent-2.0.018-linux-20231116.tar.gz)\n$ ls opm-agent-2.0.018-linux-20231116.tar.gz\rroot 로 로그인 $ su -\r압축 해제 및 인스톨러 실행 $ gunzip opm-agent-2.0.018-linux-20231116.tar.gz $ tar -xvf opm-agent-2.0.018-linux-20231116.tar $ cd opm-agent-2.0.018-linux-20231116 $ ./install.sh\r입력 설치할 경로 등을 입력하고, 출력되는 내용을 확인 후 설치를 진행합니다. 아래 입력값은 예시입니다. 자신의 마스터 정보를 확인하고 올바른 IP와 PORT를 입력하시기 바랍니다.\nInput installation directory (enter for /infsw/opmnsa) : Input IP address of OPMATE MASTER : 10.0.0.1 Input PORT number of OPMATE MASTER (enter for 34813) : ... Input \u0026#39;yes\u0026#39; to proceed installation : yes\r점검 구동 후 로그 파일 (e.g. /infsw/opmnsa/log/opm-agent.log) 을 확인하여 에러없이 정상적으로 시작되었는지 확인합니다.\n$ cat /infsw/opmnsa/log/opm-agent.log 2021-11-19 16:12:42 INFO - Agent Starting... 2021-11-19 16:12:42 INFO - Successfully registered to the master 2021-11-19 16:12:42 INFO - Agent Started\r파일 준비 최신 버전의 설치 파일(e.g. opm-agent-2.0.018-windows-20231116.exe)을 준비하여 C:\\ 에 복사합니다.\n명령 프롬프트 실행 실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 관리자 권한으로 실행한 후, 설치파일이 존재하는 디렉토리로 이동합니다.\nC:\\Users\\Administrator\u0026gt; cd /d C:\\ C:\\\u0026gt; dir *.exe opm-agent-2.0.018-windows-20231116.exe\r압축 해제 및 인스톨러 실행 C:\\\u0026gt; opm-agent-2.0.018-windows-20231116.exe C:\\\u0026gt; cd opm-agent-2.0.018-windows-20231116 C:\\opm-agent-2.0.018-windows-20231116\u0026gt; install.bat\r입력 설치할 경로 등을 입력하고, 출력되는 내용을 확인 후 설치를 진행합니다.\n아래 입력값은 예시입니다. 자신의 마스터 정보를 확인하고 올바른 IP와 PORT를 입력하시기 바랍니다.\nInput installation directory (enter for C:\\infsw\\opmnsa) : Input IP address of OPMATE MASTER : 10.0.0.1 Input PORT number of OPMATE MASTER (enter for 34813) : ... Input \u0026#39;yes\u0026#39; to proceed installation : yes\r점검 구동 후 로그 파일 (e.g. C:\\infsw\\opmnsa\\log\\opm-agent.log) 을 확인하여 에러없이 정상적으로 시작되었는지 확인합니다.\nC:\\\u0026gt; type C:\\infsw\\opmnsa\\log\\opm-agent.log 2021-11-19 15:45:37 INFO - Agent Starting... 2021-11-19 15:45:37 INFO - Successfully registered to the master 2021-11-19 15:45:37 INFO - Agent Started\r","date":"2023-08-21","id":22,"permalink":"/hugo-test2/v2/agentinstall/","summary":"\u003chr\u003e\n\r\n\r\n\r\n\r\n\r\n\r\n\u003cnav\u003e\r\n  \u003cdiv class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\"\u003e\r\n  \u003cbutton data-toggle-tab=\"linux\" class=\"nav-link active\" id=\"tabs-AgentInstallation-0-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#tabs-AgentInstallation-0\" type=\"button\" role=\"tab\" aria-controls=\"tabs-AgentInstallation-0\" aria-selected=\"true\"\u003e\r\n      Linux\u003c/button\u003e\r\n  \u003cbutton data-toggle-tab=\"windows\" class=\"nav-link\" id=\"tabs-AgentInstallation-1-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#tabs-AgentInstallation-1\" type=\"button\" role=\"tab\" aria-controls=\"tabs-AgentInstallation-1\" aria-selected=\"true\"\u003e\r\n      Windows\u003c/button\u003e\r\n  \u003c/div\u003e\r\n\u003c/nav\u003e\r\n\r\n\u003cdiv class=\"tab-content\" id=\"nav-tabContent\"\u003e\r\n  \u003cdiv data-pane=\"linux\" class=\"tab-pane fade show active\" id=\"tabs-AgentInstallation-0\" role=\"tabpanel\" aria-labelledby=\"tabs-AgentInstallation-0-tab\" tabindex=\"0\"\u003e\r\n      \u003ch3 id=\"파일-준비\"\u003e파일 준비\u003c/h3\u003e\n\u003cp\u003e최신 버전의 설치 파일을 준비합니다.(e.g. opm-agent-2.0.018-linux-20231116.tar.gz)\u003c/p\u003e","tags":[],"title":"에이전트 설치"},{"content":" Linux\rWindows\r에이전트가 /infsw/opmnsa 디렉토리에 설치되어 있다고 가정하였습니다.\n실제 설치된 경로에 따라 진행하시기 바랍니다.\nroot로 로그인 $ su -\r에이전트 중지 실행중인 에이전트를 중지시킵니다.\nCentOS(RHEL) Linux 8 / CentOS(RHEL) Linux 7 / Debian 10 / Oracle Linux 8 / openSUSE 15.2 / Ubuntu 18.04 / Ubuntu 20.04\r$ systemctl stop opmsvc\rCentOS(RHEL) Linux 6 / CentOS(RHEL) Linux 5\r$ service opmsvc stop\r중지 상태 확인 $ ps -ef | grep opmsvc\r서비스에서 제거 CentOS(RHEL) Linux 8 / CentOS(RHEL) Linux 7 / Debian 10 / Oracle Linux 8 / openSUSE 15.2 / Ubuntu 18.04 / Ubuntu 20.04\r$ systemctl disable opmsvc $ rm /etc/systemd/system/opmsvc.service\rCentOS(RHEL) Linux 6 / CentOS(RHEL) Linux 5\r$ chkconfig --del opmsvc $ rm /etc/init.d/opmsvc\r파일 삭제 에이전트가 설치된 디렉토리 및 파일을 삭제합니다.\n$ rm -rf /infsw/opmnsa $ rm -f /usr/bin/opmget $ rm -f /usr/bin/opmput $ rm -f /usr/bin/opmls $ rm -f /run/opmsvc.pid $ rm -f /var/run/opmsvc.pid\r에이전트가 C:\\infsw\\opmnsa 디렉토리에 설치되어 있다고 가정하였습니다.\n실제 설치된 경로에 따라 진행하시기 바랍니다.\n명령 프롬프트 실행 실행 메뉴에서 cmd 를 입력하여 명령프롬프트를 관리자 권한으로 실행합니다.\nC:\\Users\\Administrator\u0026gt; 에이전트 중지 실행중인 에이전트를 중지시킵니다.\nC:\\Users\\Administrator\u0026gt; sc stop \u0026#34;opmsvc\u0026#34;\r중지 상태 확인 에이전트 상태를 확인하고, 상태가 \u0026ldquo;STOPPED\u0026rdquo; 인지 확인합니다.\nC:\\Users\\Administrator\u0026gt; sc query \u0026#34;opmsvc\u0026#34;\r서비스에서 제거 윈도우즈 서비스에 등록된 에이전트를 제거합니다.\nC:\\Users\\Administrator\u0026gt; sc delete \u0026#34;opmsvc\u0026#34;\r파일 삭제 에이전트가 설치된 디렉토리 전체를 삭제합니다.\nC:\\Users\\Administrator\u0026gt; rmdir /s /q C:\\infsw\\opmnsa\r환경 변수 수정 시스템 변수의 수정 화면(제어판 -\u0026gt; 시스템 -\u0026gt; 고급 시스템 설정 -\u0026gt; 환경변수 -\u0026gt; 시스템 변수)을 열고, Path 항목의 변수값에서 에이전트의 실행 파일 경로(C:\\infsw\\opmnsa\\bin)를 제거합니다.\n","date":"2023-08-21","id":23,"permalink":"/hugo-test2/v2/agentuninstall/","summary":"\u003chr\u003e\n\r\n\r\n\r\n\r\n\r\n\r\n\u003cnav\u003e\r\n  \u003cdiv class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\"\u003e\r\n  \u003cbutton data-toggle-tab=\"linux\" class=\"nav-link active\" id=\"tabs-AgentInstallation-0-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#tabs-AgentInstallation-0\" type=\"button\" role=\"tab\" aria-controls=\"tabs-AgentInstallation-0\" aria-selected=\"true\"\u003e\r\n      Linux\u003c/button\u003e\r\n  \u003cbutton data-toggle-tab=\"windows\" class=\"nav-link\" id=\"tabs-AgentInstallation-1-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#tabs-AgentInstallation-1\" type=\"button\" role=\"tab\" aria-controls=\"tabs-AgentInstallation-1\" aria-selected=\"true\"\u003e\r\n      Windows\u003c/button\u003e\r\n  \u003c/div\u003e\r\n\u003c/nav\u003e\r\n\r\n\u003cdiv class=\"tab-content\" id=\"nav-tabContent\"\u003e\r\n  \u003cdiv data-pane=\"linux\" class=\"tab-pane fade show active\" id=\"tabs-AgentInstallation-0\" role=\"tabpanel\" aria-labelledby=\"tabs-AgentInstallation-0-tab\" tabindex=\"0\"\u003e\r\n      \u003cbr\u003e\n\u003cp\u003e에이전트가 \u003cstrong\u003e\u003ccode\u003e/infsw/opmnsa\u003c/code\u003e\u003c/strong\u003e 디렉토리에 설치되어 있다고 가정하였습니다.\u003c/p\u003e","tags":[],"title":"에이전트 제거"},{"content":"V2.0\n","date":"2020-10-06","id":24,"permalink":"/hugo-test2/v2/","summary":"\u003cp\u003eV2.0\u003c/p\u003e","tags":[],"title":"v2.0"},{"content":"OPMATE CLI 명령어는 opmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; \u0026lt;option\u0026gt;의 형식으로 이루어져 있습니다. 가능한 파라미터와 설명을 보고 싶다면, 다음의 형식으로 마지막에 help를 붙여주면 됩니다.\n$ opmate help $ opmate \u0026lt;object\u0026gt; help $ opmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; help 다음은 활용 예제입니다.\n$ opmate help usage: opmate \u0026lt;user|usergroup|node|nodegroup|task|file|info\u0026gt; \u0026lt;action\u0026gt; [help|\u0026lt;options\u0026gt;]\r$ opmate user help usage: opmate user \u0026lt;list|view|create|edit|passwd|delete|login|logout\u0026gt; [help|\u0026lt;options\u0026gt;]\r$ opmate user list help usage: opmate user list [-id \u0026lt;substring\u0026gt;] [-nm \u0026lt;substring\u0026gt;] [-ro \u0026lt;role-num\u0026gt;] [-st \u0026lt;E|D\u0026gt;] [-lm \u0026lt;number\u0026gt;] [-of \u0026lt;number\u0026gt;] -id,--id \u0026lt;substring\u0026gt; Filter by ID -nm,--name \u0026lt;substring\u0026gt; Filter by name -ro,--role \u0026lt;role-num\u0026gt; Filter by role * 0 : Administrator * 1 : Approver * 2 : Operator * 3 : Viewer -st,--status \u0026lt;E|D\u0026gt; Filter by status : Enable/Disable -lm,--limit \u0026lt;number\u0026gt; Maximum number of rows -of,--offset \u0026lt;number\u0026gt; First row number, starting at 0\r최초로 opmate라는 명령을 실행하면, 사용자 홈디렉토리에 자동으로 .opm/ 디렉토리가 만들어지고 하위에 config 파일이 생성됩니다. config 파일에 OPMATE 마스터의 URL을 설정해야 정상적으로 CLI를 사용할 수 있습니다.\n$ vi ~/.opm/config master_url=https://127.0.0.1:8443/opmate\r","date":"0001-01-01","id":25,"permalink":"/hugo-test2/v10/tutorial/quicktutorial1/","summary":"\u003cp\u003eOPMATE CLI 명령어는 \u003ccode\u003eopmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; \u0026lt;option\u0026gt;\u003c/code\u003e의 형식으로 이루어져 있습니다. 가능한 파라미터와 설명을 보고 싶다면, 다음의 형식으로 마지막에 \u003ccode\u003ehelp\u003c/code\u003e를 붙여주면 됩니다.\u003c/p\u003e","tags":[],"title":"1. CLI 사용법 및 초기 설정"},{"content":" OPMATE 란? OPMATE는 Operator`s Mate 또는 Operation Automation 이라는 중의적 의미를 가지며,\n동일한 스크립트를 여러 노드에 실행 시키고 결과를 확인하기 위한 솔루션이다.\n사용자는 OPMATE CLI(Command Line Interface) 등을 통해서 OPMATE 에이전트가 설치된 각각의 호스트(Host)에 수행할 작업을 사전 정의하고 일괄 수행할 수 있다.\n사용자는 반복적이고 위험할 수 있는 작업을 OPMATE를 통해 사전에 정의/검토하여 일괄 수행함으로서 안정적이고 효율적으로 수행/관리 할 수 있게된다.\n아래 그림에서는 Disk 의 정보를 확인하는 UNIX/Linux 의 \u0026ldquo;df\u0026rdquo; 명령을 수행하는 스크립트를 작성 및 일괄 수행하고 있다. 물론, 결과 또한 각각의 호스트(Host)에 개별 접속하지 않고 OPMATE CLI 등을 통해서 확인 가능하다.\nOPMATE 의 객체 OPMATE 는 아래 그림에 나타낸 객체 들의 조합을 통해 TASK를 정의하고 수행한다.\n객체 설명 User 사용자는 OPMATE를 사용하기 위한 계정이며, 역할에 따라 수행 가능한 작업의 범위가 달라진다. User Group 사용자그룹은 여러명의 사용자 집합이다. 다수의 사용자들을 동시에 지정하는 용도로 사용한다. Node 노드는 에이전트가 설치되어 있는 운영관리의 대상이 되는 호스트(Host)이다. Node Group 노드그룹은 여러 노드가 모여 있는 집합이다. 다수의 노드들을 동시에 지정하는 용도로 사용된다. Task 태스크는 하나 이상의 노드를 대상으로 동일한 작업(스크립트)을 동시에 실행하기 위한 작업 정의서이다. Task Instance 태스크인스턴스는 태스크 실행시 생성되며 실행에 관련된 각종 정보를 가지고 있다. File 파일은 Master 리파지토리의 파일을 의미하며, 에이전트로부터 수집되거나 또는 에이전트에 배포된다. 각각의 객체에 대한 자세한 설명은 다음 장에서 설명한다.\n","date":"0001-01-01","id":26,"permalink":"/hugo-test2/v11/manual/usermanual1/","summary":"\u003chr\u003e\n\u003ch2 id=\"opmate-란\"\u003eOPMATE 란?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eOPMATE\u003c/strong\u003e는 \u003cem\u003eOperator`s Mate\u003c/em\u003e 또는 \u003cem\u003eOperation Automation\u003c/em\u003e 이라는 중의적 의미를 가지며,\u003cbr\u003e\n동일한 스크립트를 여러 노드에 실행 시키고 결과를 확인하기 위한 솔루션이다.\u003c/p\u003e","tags":[],"title":"1. 개요"},{"content":"사용자 (User) 사용자는 다음과 같은 정보를 가진다.\n사용자ID, 사용자명, 비밀번호, 휴대전화, 이메일, 역할, 활성상태, 설명\n$ opmate user view -id bumbee +-------------+------------------+ | FIELD | VALUE | +-------------+------------------+ | ID | bumbee | ☜ 사용자ID | NAME | Bumblebee | ☜ 사용자명 | EMAIL | bumbee@email.com | ☜ 이메일 | PHONE | 010-0000-0000 | ☜ 휴대전화 | ROLE | 2 | ☜ 역할 | STATUS | enable | ☜ 활성상태 | DESCRIPTION | Sometimes Camaro | ☜ 설명 | LAST LOGIN | 2020/03/11 15:12 | ☜ 마지막 로그인 일시 | CREATED AT | 2020/03/06 16:04 | | CREATED BY | admin | | UPDATED AT | 2020/03/11 11:50 | | UPDATED BY | bumbee | +-------------+------------------+\r로그인없이 계정을 생성 할 수는 있지만, 생성한 계정을 바로 사용할 수는 없다.\n계정을 생성했다면 시스템관리자(레벨0)가 해당 계정에 적절한 역할(권한)을 부여하고, 계정을 활성화 시켜주어야 사용자는 해당 계정을 사용할 수 있게 된다.\n역할 (Role) 사용자는 다음과 같은 종류의 역할(Role)을 가질 수 있으며, 역할에 따라 수행 가능한 작업의 범위가 달라진다.\n역할 레벨 작업 권한 Administrator 0 전체 시스템 운영을 위한 각종 변경을 할 수 있다. Manager 1 신규로 생성되거나 변경된 태스크를 승인하고, 노드그룹을 관리할 수 있다. Operator 2 태스크를 정의하고 실행하기 위한 권한을 갖는다. Guest 3 조회 위주의 작업만 가능하다. 레벨 0가 가장 높으며, 순서대로 낮은 권한을 갖는다. 상위 레벨은 하위 레벨이 가능한 작업을 수행할 수 있다.\n","date":"0001-01-01","id":27,"permalink":"/hugo-test2/v11/manual/usermanual2/","summary":"\u003ch2 id=\"사용자-user\"\u003e사용자 (User)\u003c/h2\u003e\n\u003cp\u003e사용자는 다음과 같은 정보를 가진다.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e사용자ID, 사용자명, 비밀번호, 휴대전화, 이메일, 역할, 활성상태, 설명\u003c/p\u003e\n\u003c/blockquote\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ opmate user view -id bumbee\n\n+-------------+------------------+\n| FIELD       | VALUE            |\n+-------------+------------------+\n| ID          | bumbee           | ☜ 사용자ID\n| NAME        | Bumblebee        | ☜ 사용자명\n| EMAIL       | bumbee@email.com | ☜ 이메일\n| PHONE       | 010-0000-0000    | ☜ 휴대전화\n| ROLE        | 2                | ☜ 역할\n| STATUS      | enable           | ☜ 활성상태\n| DESCRIPTION | Sometimes Camaro | ☜ 설명\n| LAST LOGIN  | 2020/03/11 15:12 | ☜ 마지막 로그인 일시\n| CREATED AT  | 2020/03/06 16:04 |\n| CREATED BY  | admin            |\n| UPDATED AT  | 2020/03/11 11:50 |\n| UPDATED BY  | bumbee           |\n+-------------+------------------+\u003c/code\u003e\u003c/pre\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e로그인없이 계정을 생성 할 수는 있지만, 생성한 계정을 바로 사용할 수는 없다.\u003c/p\u003e","tags":[],"title":"2. 사용자"},{"content":"다음과 같이 나의 사용자 계정을 만듭니다. 사용자ID는 bumbee이고, 이름, 전화번호, 이메일 등을 입력합니다.\n$ opmate user create -id bumbee -nm \u0026#39;Bumblebee\u0026#39; -pn \u0026#39;010-2222-2222\u0026#39; -ea \u0026#39;bumbee@email.com\u0026#39; Requesting https://127.0.0.1:8443/opmate Enter password: Confirm password: bumbee has been created successfully.\r정상적으로 생성이 되었지만, 아직은 사용이 불가능합니다. 관리자 권한을 가지고 있는 사용자에게 활성화를 요청합니다.\n관리자(admin)는 당신의 요청을 듣고, 다음과 같이 사용자 목록을 조회해 봅니다.\n$ opmate user list Requesting https://127.0.0.1:8443/opmate;user=admin +--------+---------------+------+---------+ | ID | NAME | ROLE | STATUS | +--------+---------------+------+---------+ | admin | nimda | 0 | enable | | oprim | Optimus Prime | 1 | enable | | bumbee | Bumblebee | 3 | disable | +--------+---------------+------+---------+ ROWS COUNT : 3/3\rbumbee라는 사용자가 추가된 것을 확인하고, 다음과 같은 명령으로 활성화 및 ROLE 2를 부여합니다. ROLE은 권한 레벨을 의미하며, 최소 2레벨이 되어야 각종 작업을 수행할 수 있습니다.\n$ opmate user edit -id bumbee -ro 2 -st E Requesting https://127.0.0.1:8443/opmate;user=admin bumbee has been modified successfully.\r자, 이제 bumbee로 로그인해볼까요?\n$ opmate user login -id bumbee Requesting https://127.0.0.1:8443/opmate Enter password: bumbee has been logged in successfully.\r","date":"0001-01-01","id":28,"permalink":"/hugo-test2/v10/tutorial/quicktutorial2/","summary":"\u003cp\u003e다음과 같이 나의 사용자 계정을 만듭니다. 사용자ID는 bumbee이고, 이름, 전화번호, 이메일 등을 입력합니다.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ opmate user create -id bumbee -nm \u003cspan class=\"s1\"\u003e\u0026#39;Bumblebee\u0026#39;\u003c/span\u003e -pn \u003cspan class=\"s1\"\u003e\u0026#39;010-2222-2222\u0026#39;\u003c/span\u003e -ea \u003cspan class=\"s1\"\u003e\u0026#39;bumbee@email.com\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eRequesting https://127.0.0.1:8443/opmate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEnter password: \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eConfirm password: \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebumbee has been created successfully.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e정상적으로 생성이 되었지만, 아직은 사용이 불가능합니다.\n관리자 권한을 가지고 있는 사용자에게 활성화를 요청합니다.\u003c/p\u003e","tags":[],"title":"2. 사용자 계정 생성 및 로그인"},{"content":" OPMATE에 액세스하기 위해서는 인증이 필요합니다.\n본 튜토리얼에선 \u0026lsquo;gildong\u0026rsquo; 명의로 인증을 진행하겠습니다.\nopmate user login으로 로그인합니다.\n$ opmate user login -id gildong \u0026gt; Requesting https://127.0.0.1:8443/opmate \u0026gt; Enter password: \u0026gt; Last login: 2024-01-01 17:07:39 KST\r비밀번호를 입력하면 \u0026lsquo;Last Login\u0026rsquo;이 표시되며, 정상적으로 로그인되었음을 확인할 수 있습니다.\n","date":"0001-01-01","id":29,"permalink":"/hugo-test2/v2/tutorial/tutorial2/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eOPMATE\u003c/strong\u003e에 액세스하기 위해서는 인증이 필요합니다.\u003cbr\u003e\n본 튜토리얼에선 \u003cspan style=\"color:#0000FF\"\u003e\u0026lsquo;gildong\u0026rsquo;\u003c/span\u003e 명의로 인증을 진행하겠습니다.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\u003cinline style=\"color:#ff4500\"\u003eopmate user login\u003c/inline\u003e으로 로그인합니다.\u003c/span\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ opmate user login -id gildong\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; Requesting https://127.0.0.1:8443/opmate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; Enter password: \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; Last login: 2024-01-01 17:07:39 KST\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cspan\u003e비밀번호를 입력하면 \u0026lsquo;Last Login\u0026rsquo;이 표시되며, 정상적으로 로그인되었음을 확인할 수 있습니다.\u003c/span\u003e\u003c/p\u003e","tags":[],"title":"2. 사용자 로그인"},{"content":" 노드(Node)는 자동화 작업의 대상이 되는 호스트(Host)입니다.\n에이전트를 호스트에 설치하면, 해당 호스트가 마스터 서버에 노드로 등록됩니다.\n그러면 사용 가능한 노드가 어떤 것들이 있는지 확인해 보겠습니다.\n우선 opmate node list로 전체 노드 목록을 조회합니다.\n$ opmate node list \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +--------------------------------------+-----------------+---------------+------------+-----------+-------------------------+ | NODE-SESSION-ID | HOSTNAME | REMOTE-ADDR | OS-TYPE | AGENT-VER | HEARTBEAT | +--------------------------------------+-----------------+---------------+------------+-----------+-------------------------+ | 01d5020e-dc5f-4744-ad9c-22f23727db76 | DB-DEV-LINUX | 172.31.3.147 | Linux | 2.0.020 | 2024-03-20 11:05:59 KST | | 98a318fd-f51e-4222-a3c0-2f58e55b5822 | DB-DEV-WIN | 172.31.9.20 | Windows_NT | 2.0.020 | 2024-03-20 11:05:39 KST | | e8167cfe-a696-4733-b5a0-8de5823f5a95 | DB-PROD-LINUX | 172.31.8.148 | Linux | 2.0.020 | 2024-03-20 11:05:22 KST | | 9510d4b6-4269-4b00-a2be-cb408c6e668d | APP-DEV-LINUX | 172.31.8.75 | Linux | 2.0.020 | 2024-03-20 11:05:51 KST | +--------------------------------------+-----------------+---------------+------------+-----------+-------------------------+ \u0026gt; ROWS COUNT : 4/4\rOS-TYPE을 기준으로 윈도우 노드가 1개, 리눅스 노드가 3개 - 총 4개의 노드가 조회됩니다.\n이 중 HOSTNAME이 \u0026lsquo;DB-PROD-LINUX\u0026rsquo;인 노드를 좀 더 자세히 살펴볼까요?\nopmate node view로 노드의 상세 정보를 조회할 수 있습니다.\n$ opmate node view -id e8167cfe-a696-4733-b5a0-8de5823f5a95 \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +-----------------------+---------------------------------------------------------+ | FIELD | VALUE | +-----------------------+---------------------------------------------------------+ | NODE-SESSION-ID | e8167cfe-a696-4733-b5a0-8de5823f5a95 | | SESSION-ESTABLISHMENT | 2024-03-18 15:15:51 KST | | SESSION-STATUS | normal | | AGENT-VERSION | 2.0.020.Linux.x86_64.20240216.1 | | REMOTE-ADDRESS | 172.31.8.148 | | HEARTBEAT | 2024-03-20 11:15:22 KST | | HOSTNAME | DB-PROD-LINUX | | OS-TYPE | Linux | | OS-NAME | Red Hat Enterprise Linux 9.3 (Plow) | | OS-VERSION | 5.14.0-362.18.1.el9_3.x86_64 | +-----------------------+---------------------------------------------------------+ | CSP-RESOURCE-ID | i-099ab766133afbf23 | | CSP-TAG | CT.Environment=Production | | | CT.Name=DB-PROD-RHEL | | | CT.ResourceType=AWS | +-----------------------+--------------------------------------------------------- | EXT-TAG | | +-----------------------+---------------------------------------------------------+\r노드 목록에서 조회할 수 없었던 노드의 추가 정보(OS명, 세션 정보 등)를 확인할 수 있습니다.\n또한 호스트가 클라우드에 있다면, CSP가 제공하는 메타데이터인 Resource ID와 Tag를 조회할 수 있습니다.\n이러한 데이터를 기반으로 어떤 노드가 자동화 작업의 대상이 되는지 지정할 수 있습니다.\n","date":"0001-01-01","id":30,"permalink":"/hugo-test2/v2/tutorial/tutorial3/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cb\u003e노드(Node)\u003c/b\u003e는 자동화 작업의 대상이 되는 호스트(Host)입니다.\u003cbr\u003e\n에이전트를 호스트에 설치하면, 해당 호스트가 마스터 서버에 노드로 등록됩니다.\u003c/p\u003e\n\u003cp\u003e그러면 사용 가능한 노드가 어떤 것들이 있는지 확인해 보겠습니다.\u003cbr\u003e\n\u003cspan\u003e우선 \u003cinline style=\"color:#ff4500\"\u003eopmate node list\u003c/inline\u003e로 전체 노드 목록을 조회합니다.\u003c/span\u003e\u003c/p\u003e","tags":[],"title":"3. 노드 조회"},{"content":"노드(Node)는 관리하고자 하는 서버와 대응하는 개념입니다. 서버에 에이전트를 설치 후 구동하면, 자동으로 노드가 마스터로 등록됩니다.\n우선, 노드의 목록을 조회해 보겠습니다.\n$ opmate node list Requesting https://127.0.0.1:8443/opmate;user=bumbee +----------------------------------+-----------+------------+-------+----------+-------+------------------+---------+ | ID | AGENT VER | CONNECT IP | OS | HOSTNAME | OWNER | HEARTBEAT | STATUS | +----------------------------------+-----------+------------+-------+----------+-------+------------------+---------+ | 3106E85BCF76465F8F9B16BC3873C380 | 1.0.001 | 10.0.0.92 | Linux | myhost2 | | 2019/04/30 14:10 | disable | | 6FE9E69A10B44EBEAFC3A9F05078066C | 1.0.001 | 10.0.0.91 | Linux | myhost1 | | 2019/04/30 14:10 | disable | +----------------------------------+-----------+------------+-------+----------+-------+------------------+---------+ ROWS COUNT : 2/2\r2개의 노드가 있는데, 상태(STATUS)가 비활성화(disable) 이네요. 소유자(OWNER)도 비어 있습니다. 정상적으로 사용하기 위해서는 활성화(enable)시켜야 합니다. 활성화하면서 너무 긴 ID도 줄여보겠습니다.\n$ opmate node edit -id 6FE9E69A10B44EBEAFC3A9F05078066C -wi linux01 -st E Requesting https://127.0.0.1:8443/opmate;user=bumbee 6FE9E69A10B44EBEAFC3A9F05078066C has been modified successfully. $ opmate node edit -id 3106E85BCF76465F8F9B16BC3873C380 -wi linux02 -st E Requesting https://127.0.0.1:8443/opmate;user=bumbee 3106E85BCF76465F8F9B16BC3873C380 has been modified successfully.\r다시 조회합니다.\n$ opmate node list Requesting https://127.0.0.1:8443/opmate;user=bumbee +---------+-----------+------------+-------+----------+--------+------------------+--------+ | ID | AGENT VER | CONNECT IP | OS | HOSTNAME | OWNER | HEARTBEAT | STATUS | +---------+-----------+------------+-------+----------+--------+------------------+--------+ | linux02 | 1.0.001 | 10.0.0.92 | Linux | myhost2 | bumbee | 2019/04/30 14:15 | enable | | linux01 | 1.0.001 | 10.0.0.91 | Linux | myhost1 | bumbee | 2019/04/30 14:15 | enable | +---------+-----------+------------+-------+----------+--------+------------------+--------+ ROWS COUNT : 2/2\r노드가 활성화 되었고 ID도 사용하기 편하도록 짧게 바뀌었습니다. 소유자(OWNER)는 bumbee가 되었네요.\n","date":"0001-01-01","id":31,"permalink":"/hugo-test2/v10/tutorial/quicktutorial3/","summary":"\u003cp\u003e노드(Node)는 관리하고자 하는 서버와 대응하는 개념입니다.\n서버에 에이전트를 설치 후 구동하면, 자동으로 노드가 마스터로 등록됩니다.\u003c/p\u003e\n\u003cp\u003e우선, 노드의 목록을 조회해 보겠습니다.\u003c/p\u003e","tags":[],"title":"3. 노드 활성화"},{"content":"사용자 그룹 (User Group) 사용자 그룹은 여러명의 사용자가 모여 있는 집합이다.. 다수의 사용자들을 동시에 지정하기 위한 용도로 사용되며, 한 명의 사용자는 여러 개의 사용자 그룹에 소속될 수 있다.\n사용자 그룹의 생성은 작업자 이상의 권한을 가지고 있으면 가능하고, 생성한 사용자가 해당 그룹의 소유자(Owner)가 된다.\n하나의 사용자 그룹은 다음과 같은 정보로 구성된다.\n사용자그룹ID, 소유자(Owner), 설명, 포함 사용자정보(멤버)\n$ opmate usergroup view -id mw_user_grp01 +-------------+----------------------+ | FIELD | VALUE | +-------------+----------------------+ | [BASIS] | | | | | | ID | mw_user_grp01 | ☜ 사용자그룹ID | OWNER | oprim | ☜ 소유자(Owner) | DESCRIPTION | Tomcat Operators. | ☜ 설명 | CREATED AT | 2020/02/10 11:08 | | CREATED BY | oprim | | UPDATED AT | 2020/02/10 11:15 | | UPDATED BY | oprim | | | | | [USERS] | | ☜ 사용자정보(멤버) | | Optimus Prime(oprim) | | | Bumblebee(bumbee) | +-------------+----------------------+\r소유자는 자신이 소유하고 있는 사용자 그룹의 사용자(멤버)를 구성할 수 있는 권한을 가진다.\n이외에도 사용자 그룹의 속성을 변경할 수 있으며, 소유권을 다른 사용자에게 이전 시킬 수도 있다.\n아래는 CLI 명령을 이용하여 mw_user_grp01 사용자 그룹에 bumbee 라는 ID를 가진 사용자를 추가하는 예를 보여주고 있다.\n$ opmate usergroup adduser -id mw_user_grp01 -ui bumbee\r","date":"0001-01-01","id":32,"permalink":"/hugo-test2/v11/manual/usermanual3/","summary":"\u003ch2 id=\"사용자-그룹-user-group\"\u003e사용자 그룹 (User Group)\u003c/h2\u003e\n\u003cp\u003e사용자 그룹은 여러명의 사용자가 모여 있는 집합이다..\n다수의 사용자들을 동시에 지정하기 위한 용도로 사용되며,\n한 명의 사용자는 여러 개의 사용자 그룹에 소속될 수 있다.\u003c/p\u003e","tags":[],"title":"3. 사용자그룹"},{"content":"노드 (Node) 노드는 운영 관리의 대상이 되는 호스트(Host)로서, 에이전트가 설치되어 있음을 의미한다.\n하나의 노드는 다음과 같은 속성 정보를 가진다.\n노드ID, GUID, 에이전트버전, 호스트명, IP주소, OS종류, 소유자(Owner), 활성상태\n$ opmate node view -id linux01 +---------------+----------------------------------------------+ | FIELD | VALUE | +---------------+----------------------------------------------+ | ID | linux01 | ☜ 노드ID | AGENT VERSION | OPMA Version 1.1.002.Linux.x86_64.20200309.1 | ☜ 에이전트버전 | CONNECT IP | 192.168.XX.XX | ☜ IP주소 | OS | Linux | ☜ OS종류 | HOSTNAME | linux01 | ☜ 호스트명 | OWNER | bumbee | ☜ 소유자(Owner) | STATUS | enable | ☜ 활성상태 | GUID | f66ec379-4927-48d4-ac8b-0129ab7d4f2c | ☜ GUID | HEARTBEAT | 2020/03/13 10:03 | | DESCRIPTION | linux01 for Test | | CREATED AT | 2020/03/11 13:49 | | UPDATED AT | 2020/03/12 09:53 | | UPDATED BY | admin | +---------------+----------------------------------------------+\r노드 등록 노드는 별도의 등록 작업없이, 에이전트를 설치한 후 에이전트의 최초 기동시에 자동으로 등록된다.\n등록된 노드는 고유의 GUID가 자동으로 부여되고, 노드ID 역시 GUID와 유사하게 자동 부여된다. GUID와 노드ID는 유사한 개념이나 주체에 따라서 구분되어 진다.\nGUID : OPMATE가 시스템의 입장에서 각 노드를 인지하지 위한 고유식별자 노드ID : OPMATE의 사용자가 각 노드를 인지하기 위한 고유식별자 또한, 에이전트버전 / 호스트명 / IP주소 / OS종류와 같은 속성들은 에이전트에서 자동 수집하여 마스터로 전달하고 저장한다.\n자동으로 등록된 에이전트는 *소유자(Owner)*는 결정되지 않고, 비활성화 상태로 유지된다. 비활성화 상태는 태스크를 실행시킬 수 없는 상태이다.\n노드 정보 변경 신규 등록된 노드를 정상적으로 사용하기 위해서는 먼저 활성화해야 한다.\n자동으로 할당된 노드ID는 사용시 너무 길어 불편할 수 있기 때문에, 일반적으로 호스트(Host)의 호스트명(hostname)으로 변경한다. 하지만, 호스트명은 중복될 가능성이 있기 때문에, 노드ID도 중복되어 변경이 실패할 수 있다. 이러한 경우, 호스트명과 다른 문자를 조합하여 고유한 노드ID로 부여하는 것을 권장한다.\n아래의 예시는 자동 등록 시 중복 방지를 위해 복잡한 난수 형태로 부여된 DF9CAC56C0D441778CFBF3CCDFEAAC0D 값을 사용자에게 친숙한 linux01 이라는 새로운 ID로 변경하고 있다.\nCLI 명령어를 통해서 에이전트 최초 기동시에 자동 부여된 노드ID를 사용자가 인지하기 쉽도록 변경하고, 동시에 노드를 활성화 상태로 변경하고 있다.\n$ opmate node edit -id DF9CAC56C0D441778CFBF3CCDFEAAC0D -wi linux01 -st E\r소유자가 지정되지 않은 노드는 작업자(레벨2) 이상의 권한을 가지고 있는 사용자가 변경할 수 있다. 이때, 별도로 지정하지 않는다면 처음 변경한 사용자가 해당 노드의 **소유자(Owner)**가 된다.\n소유자는 노드의 정보를 변경할 수 있으며, 소유자를 다른 사용자로 변경할 수도 있다. 아래의 예시는 CLI 명령어를 통해서 linux01 노드의 소유자를 bumbee 로 변경하고 있다.\n$ opmate node edit -id linux01 -oi bumbee\r단, 노드의 삭제는 시스템관리자(레벨0)만 가능하다.\n노드 비활성화 노드를 비활성화하면 해당 노드가 태스크의 대상 노드(Target Node)로 등록되어 있더라도, 태스크 실행시에 대상에서 제외된다. 특수한 상황으로 인하여, 해당 노드에 어떠한 태스크라도 수행되는 것을 막고 싶을 경우에 유용하다.\n시스템관리자(레벨0) 또는 노드의 소유자는 아래와 같은 CLI 명령으로 linux01 노드에서의 모든 태스크 실행을 막을 수 있다.\n$ opmate node edit -id linux01 -st D\r","date":"0001-01-01","id":33,"permalink":"/hugo-test2/v11/manual/usermanual4/","summary":"\u003ch2 id=\"노드-node\"\u003e노드 (Node)\u003c/h2\u003e\n\u003cp\u003e노드는 운영 관리의 대상이 되는 호스트(Host)로서, 에이전트가 설치되어 있음을 의미한다.\u003c/p\u003e\n\u003cp\u003e하나의 노드는 다음과 같은 속성 정보를 가진다.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e노드ID, GUID, 에이전트버전, 호스트명, IP주소, OS종류, 소유자(Owner), 활성상태\u003c/p\u003e","tags":[],"title":"4. 노드"},{"content":" 태스크(Task)는 사전 정의된 자동화 작업입니다.\n에이전트가 설치된 노드에 명령을 실행하기 위해선 태스크를 정의해야 합니다.\n본 튜토리얼에서 여러분은 DB 운영자인 \u0026lsquo;gildong\u0026rsquo;으로서 각 호스트의 가동 시간(uptime)을 조회하는 태스크를 생성할 것입니다.\n그럼 다음과 같이 태스크를 생성해 보겠습니다:\n스크립트 생성\n태스크 정의 : opmate task gentmpl\n태스크 생성 : opmate task create\n태스크 발행 : opmate task publish\n스크립트 생성 우선 호스트에서 실행될 스크립트 파일을 작성합니다.\n파일명은 task_uptime.sh로 저장합니다.\n#!/bin/bash uptime exit 0\r태스크 정의 태스크를 생성할 때는 스크립트 외에도 스크립트를 누가, 언제, 어디서, 어떻게 실행할 건지 정의해야 됩니다.\n이 때 사용되는 파일이 **태스크 정의서 파일(Task Definition Form, TDF)**입니다.\nopmate task gentmpl로 태스크 정의서의 템플릿 파일을 생성합니다.\n$ opmate task gentmpl -id task_uptime \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong \u0026gt; template has been saved to \u0026#39;task_uptime.tdf\u0026#39;\r-id 파라미터에 적은 파일명으로 TDF 템플릿 파일이 생성됩니다.\n이 파일을 통해 태스크 정보, 타깃 노드, 실행 스케줄, 사용자 권한 등을 설정할 수 있습니다.\n주석을 참조하면서 템플릿 파일을 다음과 같이 수정합니다:\n--- id: task_uptime owner: gildong script-account: root description: 서버 가동 시간 조회 target: - node-set: OS-TYPE:\u0026#34;^Linux$\u0026#34; description: OS가 Linux인 모든 노드 대상으로 Task 실행 ...\rid으로 태스크의 ID값을 지정할 수 있습니다.\n또한 target으로 태스크의 실행 대상이 되는 노드를 지정할 수 있습니다.\nnode-set을 추가하면서 정규 표현식으로 노드를 지정하면 됩니다.\n본 예시에선 OS-TYPE:\u0026quot;^Linux$\u0026quot;이란 표현식으로 노드를 지정했습니다.\n여기서 OS-TYPE은 노드의 필드 중 하나입니다.\nHOSTNAME, CSP-TAG 등의 다양한 필드를 조합해 노드를 필터링할 수 있습니다.\n\u0026quot;^Linux$\u0026quot;는 문자열 값이 정확히 \u0026ldquo;Linux\u0026quot;와 일치한다는 뜻입니다.\n캐럿 기호 ^는 텍스트의 시작, 달러 기호 $은 텍스트의 끝을 나타냅니다.\n태스크 생성 opmate task create로 태스크를 생성합니다.\n앞서 작성한 스크립트 파일과 TDF 파일을 활용합니다.\n$ opmate task create -tf task_uptime.tdf -sf task_uptime.sh \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong \u0026gt; task_uptime has been created successfully.\r이 때 태스크는 수정 가능한 상태로 Master 서버에 등록됩니다.\n태스크 발행 수정을 거쳐 태스크의 최종본이 확정되면 태스크를 발행해 실행 가능한 상태로 만듭니다.\nopmate task publish로 태스크를 발행합니다.\n$ opmate task publish -id task_uptime \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong \u0026gt; task_uptime has been published successfully.\r","date":"0001-01-01","id":34,"permalink":"/hugo-test2/v2/tutorial/tutorial4/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cb\u003e태스크(Task)\u003c/b\u003e는 사전 정의된 자동화 작업입니다.\u003cbr\u003e\n에이전트가 설치된 노드에 명령을 실행하기 위해선 태스크를 정의해야 합니다.\u003c/p\u003e\n\u003cp\u003e본 튜토리얼에서 여러분은 DB 운영자인 \u003cspan style=\"color:#0000FF\"\u003e\u0026lsquo;gildong\u0026rsquo;\u003c/span\u003e으로서 각 호스트의 가동 시간(uptime)을 조회하는 태스크를 생성할 것입니다.\u003c/p\u003e","tags":[],"title":"4. 태스크 생성"},{"content":"에이전트가 설치된 노드에 명령을 실행하기 위해서, 태스크(Task)를 정의해야 합니다.\n먼저, 스크립트 파일을 만듭니다.\n$ vi diskusage.sh #!/bin/sh df -h\rdiskusage라는 ID로 태스크를 생성합니다. 위에서 만든 쉘스크립트 파일의 경로를 주고, 서버에서 실행할 OS 사용자명은 root로 지정합니다. 또한, 온디맨드 방식으로 실행할 수 있도록, '-eo E' 옵션도 추가합니다.\n$ opmate task create -id diskusage -sf ./diskusage.sh -ou root -eo E Requesting https://127.0.0.1:8443/opmate;user=bumbee diskusage has been created successfully.\r생성한 태스크가 어떤 노드에서 실행될지 타겟노드(Target Node)를 지정해야 합니다. 2개 노드에서 실행되도록 다음과 같이 입력합니다.\n$ opmate task addtarget -id diskusage -nd linux01 Requesting https://127.0.0.1:8443/opmate;user=bumbee linux01 has been added to target successfully. $ opmate task addtarget -id diskusage -nd linux02 Requesting https://127.0.0.1:8443/opmate;user=bumbee linux02 has been added to target successfully.\r태스크가 잘 생성되었는지 확인해 보겠습니다. 태스크가 많으면 목록이 너무 길어질테니, 소유자(OWNER)가 bumbee인 태스크만 조회해 봅니다.\n$ opmate task list -oi bumbee Requesting https://127.0.0.1:8443/opmate;user=bumbee +-----------+------+--------+--------------+---------+-----------+-------------+------------+ | ID | REV. | OWNER | SCRIPT | OS USER | NEXT TASK | APPRV STAT. | APPRV USER | +-----------+------+--------+--------------+---------+-----------+-------------+------------+ | diskusage | 0 | bumbee | diskusage.sh | root | | N/A | | +-----------+------+--------+--------------+---------+-----------+-------------+------------+ ROWS COUNT : 1/1\r조금 더 자세히 볼까요?\n$ opmate task view -id diskusage Requesting https://127.0.0.1:8443/opmate;user=bumbee +------------------+---------------+ | FIELD | VALUE | +------------------+---------------+ | [BASIS] | | | | | | ID | diskusage | | REVISION | 0 | | OWNER | bumbee | | SCRIPT | diskusage.sh | | OS USER | root | | BY SCHEDULER | disable | | BY ONDEMAND | enable | | BY TASK | disable | | NEXT TASK | | | APPRV STATUS | N/A | | APPRV REQ REASON | | | APPRV RJT REASON | | | APPRV USER | | | DESCRIPTION | | | | | | [SCHEDULES] | | | | | | [RUNNERS] | | | | | | [TARGETS] | | | | linux01(Node) | | | linux02(Node) | +------------------+---------------+\r잘 생성되었지만 아직 아니랍니다. 리비젼(REVISION) 번호가 0인 것과 승인상태(APPRV STATUS)가 N/A인 것에 주목하세요. 태스크는 승인을 받아야 실제로 실행할 수 있습니다.\n","date":"0001-01-01","id":35,"permalink":"/hugo-test2/v10/tutorial/quicktutorial4/","summary":"\u003cp\u003e에이전트가 설치된 노드에 명령을 실행하기 위해서, 태스크(Task)를 정의해야 합니다.\u003c/p\u003e\n\u003cp\u003e먼저, 스크립트 파일을 만듭니다.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ vi diskusage.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#!/bin/sh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edf -h\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003ediskusage\u003c/code\u003e라는 ID로 태스크를 생성합니다.\n위에서 만든 쉘스크립트 파일의 경로를 주고, 서버에서 실행할 OS 사용자명은 root로 지정합니다.\n또한, 온디맨드 방식으로 실행할 수 있도록, \u003ccode\u003e'-eo E'\u003c/code\u003e 옵션도 추가합니다.\u003c/p\u003e","tags":[],"title":"4. 태스크 정의"},{"content":"노드 그룹 (Node Group) 노드 그룹은 여러개의 노드가 모여있는 집합이며, 하나의 노드는 여러개의 노드 그룹에 소속될 수 있다. 노드 그룹을 생성/수정/삭제하기 위해서는 관리자(레벨1)권한 이상이 필요하다.\n하나의 노드 그룹은 다음과 같은 정보로 구성된다.\n노드그룹ID, 소유자(Owner), 속성(Attribute), 포함 노드, 설명\n$ opmate nodegroup view -id linux_tomcat +--------------+--------------------------+ | FIELD | VALUE | +--------------+--------------------------+ | [BASIS] | | | | | | ID | linux_tomcat | ☜ 노드그룹ID | OWNER | bumbee | ☜ 소유자(Owner) | DESCRIPTION | Installed Tomcat | | CREATED AT | 2020/02/24 11:08 | | CREATED BY | bumbee | | UPDATED AT | 2020/02/24 11:08 | | UPDATED BY | bumbee | | | | | [NODES] | | ☜ 포함 노드 | | linux01 | | | linux02 | | | linux07 | | [ATTRIBUTES] | | ☜ 속성(Attribute) | | TOMCAT_HOME=/home/tomcat | +--------------+--------------------------+\r태스크를 정의할 때 다수 노드를 쉽게 추가하기 위해 사용할 수 있으며, 공통 속성을 정의하기 위해 사용할 수 있다.\nOS의 종류/버전 또는 태스크 수행의 목적이나 호스트(Host)의 용도 등에 따라서 적절한 그룹을 생성하고 유지관리하는 것은 태스크를 정의할 때마다 반복적인 개별 노드 추가작업을 하지 않아도 되기에 사용자의 수고로움을 줄일 수 있다.\n속성 정의 그룹에 소속된 모든 노드에 공통적으로 적용할 속성(Attribute)을 정의할 수 있다.\n속성은 다음과 같이 Key, Value의 쌍으로 정의되며 태스크의 스크립트에서는 해당 Key를 사용하여 작성할 수 있다.\n\u0026ldquo;ATTRIBUTE_KEY1\u0026rdquo;=\u0026ldquo;ATTRIBUTE_VALUE1\u0026rdquo;\n예를 들어, 특정 그룹에 TOMCAT_HOME=/home/tomcat 와 같은 속성을 정의하면 소속된 모든 노드의 속성으로 동일하게 적용되며, 스크립트에 해당 속성의 치환 변수(@OPM_ATTR.속성명@)가 사용되었을 경우 정의된 값으로 치환된다.\n#!/bin/sh @OPM_ATTR.TOMCAT_HOME@/bin/startup.sh\r#!/bin/sh /home/tomcat/bin/startup.sh\r노드 그룹 복사 노드 그룹의 갯수에 제한이 있는 것은 아니지만, 새로운 노드 그룹을 정의하기에 앞서 정의하려는 노드 그룹과 동일하거나 유사한 노드 그룹이 기 정의되어 있는지 확인하는 것이 필요하다.\n이것은 동일한 노드들을 집합으로 가지는 다수의 노드 그룹이 시스템에 생성되는 것을 막아주며, 제공되는 노드 그룹 복사 기능은 유사한 노드 그룹을 생성하기에 편리하다.\n(사용자는 기존 태스크의 영향도를 줄이는 등의 특정한 목적을 가지고 의도적으로 동일한 노드들의 집합을 만들 수 있다. 이때에도 노드 그룹 복사기능은 유용하다.)\n","date":"0001-01-01","id":36,"permalink":"/hugo-test2/v11/manual/usermanual5/","summary":"\u003ch2 id=\"노드-그룹-node-group\"\u003e노드 그룹 (Node Group)\u003c/h2\u003e\n\u003cp\u003e노드 그룹은 여러개의 노드가 모여있는 집합이며, 하나의 노드는 여러개의 노드 그룹에 소속될 수 있다.\n노드 그룹을 생성/수정/삭제하기 위해서는 관리자(레벨1)권한 이상이 필요하다.\u003c/p\u003e","tags":[],"title":"5. 노드 그룹"},{"content":"신규로 생성한 태스크는 실행하기 위해서는 승인을 먼저 받아야 합니다. 승인은 승인권한을 가지고 있는 사용자만이 할 수 있습니다. 사용자 목록을 조회해보겠습니다.\n$ opmate user list Requesting https://127.0.0.1:8443/opmate;user=bumbee +--------+---------------+------+--------+ | ID | NAME | ROLE | STATUS | +--------+---------------+------+--------+ | admin | nimda | 0 | enable | | oprim | Optimus Prime | 1 | enable | | bumbee | Bumblebee | 2 | enable | +--------+---------------+------+--------+ ROWS COUNT : 3/3\rROLE이 1 또는 0인 사용자가 승인 권한을 가지고 있습니다. 사용자 oprim에게 승인 요청을 하겠습니다.\n$ opmate task reqappr -id diskusage -ai oprim Requesting https://127.0.0.1:8443/opmate;user=bumbee diskusage\u0026#39;s approval has been requested successfully.\r사용자 oprim은 bumbee에게 태스크를 승인해달라고 얘기를 듣고, 다음과 같이 승인해야할 목록을 조회해 봅니다.\n$ opmate task listappr Requesting https://127.0.0.1:8443/opmate;user=oprim +-----------+--------+--------------+---------+---------+---------+---------+-----------+-------------+------------------+------------+-------------+ | ID | OWNER | SCRIPT | OS USER | BY SCH. | BY OND. | BY TASK | NEXT TASK | APPRV STAT. | APPRV REQ REASON | APPRV USER | DESCRIPTION | +-----------+--------+--------------+---------+---------+---------+---------+-----------+-------------+------------------+------------+-------------+ | diskusage | bumbee | diskusage.sh | root | disable | enable | disable | | request | | oprim | | +-----------+--------+--------------+---------+---------+---------+---------+-----------+-------------+------------------+------------+-------------+ ROWS COUNT : 1\rdiskusage라는 태스크가 목록에 있네요. 다음과 같이 태스크를 승인합니다.\n$ opmate task acceptappr -id diskusage Requesting https://127.0.0.1:8443/opmate;user=oprim diskusage has been approved successfully.\r다시, 태스크 내용을 상세히 보겠습니다.\n$ opmate task view -id diskusage Requesting https://127.0.0.1:8443/opmate;user=bumbee +------------------+---------------+ | FIELD | VALUE | +------------------+---------------+ | [BASIS] | | | | | | ID | diskusage | | REVISION | 1 | | OWNER | bumbee | | SCRIPT | diskusage.sh | | OS USER | root | | BY SCHEDULER | disable | | BY ONDEMAND | enable | | BY TASK | disable | | NEXT TASK | | | APPRV STATUS | approval | | APPRV REQ REASON | | | APPRV RJT REASON | | | APPRV USER | oprim | | DESCRIPTION | | | | | | [SCHEDULES] | | | | | | [RUNNERS] | | | | | | [TARGETS] | | | | linux01(Node) | | | linux02(Node) | +------------------+---------------+\r리비젼(REVISION)은 1로 바뀌어 있고, 승인상태(APPRV STATUS)도 승인(approval)으로 변경되었네요. 자, 이제 이 태스크를 실행할 준비가 되었습니다.\n","date":"0001-01-01","id":37,"permalink":"/hugo-test2/v10/tutorial/quicktutorial5/","summary":"\u003cp\u003e신규로 생성한 태스크는 실행하기 위해서는 승인을 먼저 받아야 합니다.\n승인은 승인권한을 가지고 있는 사용자만이 할 수 있습니다.\n사용자 목록을 조회해보겠습니다.\u003c/p\u003e","tags":[],"title":"5. 태스크 승인"},{"content":" 태스크가 정상적으로 발행됐다면, 태스크를 실행(Execution) 할 수 있습니다.\n태스크가 실행되면 실행 인스턴스가 만들어지고, 실행 인스턴스별로 실행 ID를 부여받게 됩니다.\n태스크 실행 opmate execution run으로 이전 단계에서 발행한 태스크를 실행할 수 있습니다.\n$ opmate execution run -ts task_uptime \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong \u0026gt; execution #1 has been created successfully.\r\u0026lsquo;Execution #1\u0026lsquo;으로 태스크가 실행된 것을 확인할 수 있습니다. 이때 \u0026lsquo;1\u0026rsquo; 은 해당 실행의 실행 ID입니다. Execution 결과 조회 opmate execution listnode로 태스크 실행 결과 목록을 조회합니다.\n$ opmate execution listnode -id 1 \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +--------------------------------------+-----------------+---------------+-----------+---------+ | NODE-SESSION-ID | HOSTNAME | REMOTE-ADDR | STATUS | RESULT | +--------------------------------------+-----------------+---------------+-----------+---------+ | 9510d4b6-4269-4b00-a2be-cb408c6e668d | APP-DEV-LINUX | 172.31.8.75 | stopped | n/a | | 01d5020e-dc5f-4744-ad9c-22f23727db76 | DB-DEV-LINUX | 172.31.3.147 | completed | success | | ea3117fe-2c16-4533-afb7-8b0fe7685251 | DB-PROD-LINUX | 172.31.8.148 | completed | success | +--------------------------------------+-----------------+---------------+-----------+---------+ \u0026gt; ROWS COUNT : 3/3\r모든 리눅스 노드를 대상으로 태스크를 실행했기에 총 3개의 노드가 조회됩니다.\n여기서 STATUS가 completed라면 태스크가 정상적으로 실행 완료되었다는 뜻입니다.\nSTATUS가 requesting이나 running라면 태스크가 실행 중이라는 뜻으로 잠시 대기합니다.\n만약 STATUS가 stopped라면 모종의 이유로 태스크가 중지되었다는 뜻입니다.\n실행 완료된 노드 중 하나인 \u0026lsquo;DB-DEV-LINUX\u0026rsquo;를 opmate execution viewnode로 상세 조회해 보겠습니다.\n$ opmate execution viewnode -id 1 -nd 01d5020e-dc5f-4744-ad9c-22f23727db76 \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +-----------------+--------------------------------------+ | FIELD | VALUE | +-----------------+--------------------------------------+ | NODE-SESSION-ID | 01d5020e-dc5f-4744-ad9c-22f23727db76 | | HOSTNAME | DB-DEV-LINUX | | REMOTE-ADDRESS | 172.31.3.147 | | ACCOUNT | root | | STATUS | completed | | RESULT | success | | EXIT-NUM | 0 | | FORCE-STOP | n/a | | START-DATE | 2024-03-20 16:14:19 KST | | END-DATE | 2024-03-20 16:14:20 KST | +-----------------+--------------------------------------+ [STDOUT] 07:14:20 up 4:45, 0 users, load average: 0.05, 0.03, 0.01 [STDERR] No content.\r표준 출력(STDOUT)으로 스크립트(uptime)의 결과가 출력되는 것을 확인할 수 있습니다.\n그렇다면 이번엔 STATUS가 stopped였던 \u0026lsquo;APP-DEV-LINUX\u0026rsquo; 노드를 상세 조회해 볼까요?\n$ opmate execution viewnode -id 1 -nd 9510d4b6-4269-4b00-a2be-cb408c6e668d \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +-----------------+--------------------------------------+ | FIELD | VALUE | +-----------------+--------------------------------------+ | NODE-SESSION-ID | 9510d4b6-4269-4b00-a2be-cb408c6e668d | | HOSTNAME | APP-DEV-LINUX | | REMOTE-ADDRESS | 172.31.8.75 | | ACCOUNT | root | | STATUS | stopped : no role of node | | RESULT | n/a | | EXIT-NUM | | | FORCE-STOP | n/a | | START-DATE | | | END-DATE | | +-----------------+--------------------------------------+ [STDOUT] No content. [STDERR] No content.\r\u0026lsquo;no role of node\u0026rsquo;라는 메시지와 함께 태스크 실행이 중단된 것을 확인할 수 있습니다.\n그러면 role이란 과연 무엇이고, 왜 태스크 실행이 중단되었을까요?\n권한 확인 역할(Role)은 노드에서의 태스크 실행 권한입니다.\n태스크의 소유자(Owner)가 노드를 태스크의 대상으로 지정할 때는 반드시 지정한 노드에 대한 역할을 가지고 있어야 합니다.\n그럼 \u0026lsquo;gildong\u0026rsquo; 이 어떤 역할을 가지고 있는 지 조회해 보겠습니다.\n우선 opmate role list로 전체 역할 목록을 조회합니다.\n$ opmate role list \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +-------------+------------+ | ID | NAME | +-------------+------------+ | ro-app-dev | APP 개발자 | | ro-db-admin | DB 관리자 | | ro-db-dev | DB 개발자 | +-------------+------------+ \u0026gt;ROWS COUNT : 3/3\r총 3개의 역할이 조회됩니다.\n다시 한번 상기하자면, \u0026lsquo;gildong\u0026rsquo;은 DB 관리자입니다.\n따라서 opmate role view로 \u0026lsquo;DB 관리자\u0026rsquo; 역할을 상세 조회해 보겠습니다.\n$ opmate role view -id ro-db-admin \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +----------+------------------------------------+ | FIELD | VALUE | +----------+------------------------------------+ | ID | ro-db-admin | | NAME | DB 관리자 | | CREATED | 2024-03-20 16:02:14 KST BY admin | | UPDATED | 2024-03-20 16:14:04 KST BY admin | +----------+------------------------------------+ | NODE-SET | #1. HOSTNAME:\u0026#34;^DB-\u0026#34; AS * # DB 서버 | +----------+------------------------------------+ | USER | admin(관리자) | | | gildong(홍길동) | +----------+------------------------------------+\rUSER는 역할을 사용할 수 있는 사용자입니다. 예시에선 \u0026lsquo;admin\u0026rsquo;과 \u0026lsquo;gildong\u0026rsquo; 이 해당합니다.\nNODE-SET은 역할을 가진 사용자가 사용할 수 있는 노드입니다. 정규 표현식으로 지정되어 있습니다.\n예시에서는 호스트명이 \u0026lsquo;DB-\u0026lsquo;로 시작되는 모든 노드가 지정되어 있는데요,\nstopped 상태였던 \u0026lsquo;APP-DEV-LINUX\u0026rsquo; 노드는 \u0026lsquo;DB-\u0026lsquo;로 시작되는 노드가 아니므로,\n\u0026lsquo;DB 관리자\u0026rsquo; 역할만 가지고 있는 \u0026lsquo;gildong\u0026rsquo; 에게는 해당 노드에 대한 권한, 즉 역할이 없습니다.\n따라서 해당 노드를 제외하여, DB 노드에서만 태스크를 실행하고 싶다면\n4장: 태스크 정의에서 만들었던 태스크 정의서(test_uptime.tdf)를 다음과 같이 수정해야 합니다:\n--- id: task_uptime owner: gildong publisher: gildong script-account: root description: 서버 가동 시간 조회 target: - node-set: HOSTNAME:\u0026#34;^DB-\u0026#34;, OS-TYPE:\u0026#34;^Linux$\u0026#34; description: OS가 Linux인 모든 DB 대상으로 Task 실행\rnode-set에 HOSTNAME: \u0026ldquo;^DB-\u0026quot;라는 표현식을 추가했습니다.\n이는 HOSTNAME에 \u0026lsquo;DB-\u0026lsquo;라는 식별자로 시작하는 노드만을 포함한다는 뜻입니다.\n수정 후 task_uptime 태스크를 수정(opmate task edit) 및 발행(opmate task publish)하고,\\ 실행(opmate execution run)까지 완료하면 태스크 실행 결과가 다음과 같이 변경됩니다: $ opmate execution listnode -id 2 \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +--------------------------------------+-----------------+---------------+-----------+---------+ | NODE-SESSION-ID | HOSTNAME | REMOTE-ADDR | STATUS | RESULT | +--------------------------------------+-----------------+---------------+-----------+---------+ | 01d5020e-dc5f-4744-ad9c-22f23727db76 | DB-DEV-LINUX | 172.31.3.147 | completed | success | | ea3117fe-2c16-4533-afb7-8b0fe7685251 | DB-PROD-LINUX | 172.31.3.148 | completed | success | +--------------------------------------+-----------------+---------------+-----------+---------+ \u0026gt; ROWS COUNT : 2/2\r\u0026lsquo;APP-DEV-LINUX\u0026rsquo; 노드가 실행 목록에서 제외된 것을 확인할 수 있습니다.\n","date":"0001-01-01","id":38,"permalink":"/hugo-test2/v2/tutorial/tutorial5/","summary":"\u003chr\u003e\n\u003cp\u003e태스크가 정상적으로 발행됐다면, 태스크를 \u003cstrong\u003e실행(Execution)\u003c/strong\u003e 할 수 있습니다.\u003c/p\u003e\n\u003cp\u003e태스크가 실행되면 실행 인스턴스가 만들어지고, 실행 인스턴스별로 \u003cu\u003e실행 ID\u003c/u\u003e를 부여받게 됩니다.\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"태스크-실행\"\u003e태스크 실행\u003c/h3\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cspan\u003e\u003cinline style=\"color:#ff4500\"\u003eopmate execution run\u003c/inline\u003e으로 이전 단계에서 발행한 태스크를 실행할 수 있습니다.\u003c/span\u003e\u003c/p\u003e","tags":[],"title":"5. 태스크 실행 및 권한 확인"},{"content":"태스크 (Task) 태스크는 하나 이상의 노드를 대상으로 동일한 작업(스크립트)을 동시에 실행하기 위한 작업 정의서이다.\n태스크의 생성은 작업자 이상의 권한을 가지고 있으면 가능하고, 생성한 사용자가 해당 태스크의 소유자(Owner)가 된다.\n소유자는 태스크 정의를 변경하거나 삭제할 수 있으며, 소유자를 다른 사용자로 변경할 수도 있다.\n태스크의 주요 구성 정보는 다음과 같다.\n태스크ID, 스크립트(Script), 대상 노드(Target Node), 스케쥴(Schedule), 실행 방식, 실행 권한, 다음 태스크(Next Task), 소유자(Owner)\n$ opmate task view -id diskusage +-------------------+---------------------------------+ | FIELD | VALUE | +-------------------+---------------------------------+ | [BASIS] | | | | | | ID | diskusage | ☜ 태스크ID | REVISION | 6 | | OWNER | bumbee | ☜ 소유자(Owner) | SCRIPT | diskusage.sh | ☜ 스크립트(Script) | OS USER | root | | BY SCHEDULER | enable | ☜ 실행 방식 | BY ONDEMAND | enable | ☜ 실행 방식 | BY TASK | disable | ☜ 실행 방식 | NEXT TASK | | ☜ 다음 태스크(Next Task) | DESCRIPTION | check disk space usage | | CREATED AT | 2020/02/28 16:48 | | CREATED BY | bumbee | | UPDATED AT | 2020/03/02 10:21 | | UPDATED BY | bumbee | | | | | [APPROVAL] | | | | | | STATUS | approved | | REQ REASON | | | RJT REASON | | | APPROVER | oprim | | UPDATED AT | 2020/03/02 10:55 | | | | | [SCHEDULES] | | ☜ 스케쥴(Schedule) | | yearly01(yearly, */01/01 01:20) | | | | | [RUNNERS] | | ☜ 실행 권한 | | oprim(user) | | | | | [TARGETS] | | ☜ 대상 노드(Target Node) | | linux_tomcat(node-group) | +-------------------+---------------------------------+\r스크립트 (Script) 스크립트가 기술된 파일(bash 쉘스크립트 파일 등)과 해당 스크립트를 실행할 사용자명(OS의 계정명)을 등록한다.\n스크립트는 태스크를 수행할 노드의 OS종류에 따라서, 쉘스크립트/배치스크립트/Powershell/VBS 등으로 작성한다. 작성된 스크립트는 (OPMATE 에 사전 등록된) 특정 커맨드를 포함하고 있는 지의 여부도 검사 가능하다.\n형상관리와 유사하게 태스크의 이전 버전 스크립트 뿐만 아니라, 다른 사용자의 태스크에 등록된 스크립트도 확인 가능하다.\n대상 노드 (Target Node) 태스크가 실행되기 원하는 대상 노드를 지정한다.\n노드 또는 노드 그룹으로 추가할 수 있으며, 노드와 노드 그룹을 혼용하여 지정할 수도 있다. (노드 A가 노드 그룹 G1/G2에 모두 속해 있더라도, 태스크에 노드 그룹 G1/G2를 지정할 수 있다.)\n아래의 그림은 사용자가 지정한 대상에 대해서, OPMATE가 실제 태스크 수행시에 대상을 어떻게 관리하는지 보여주고 있다.\n사용자는 노드그룹 G1/G2를 태스크의 대상으로 지정했으며, 두 개의 노드그룹에서 노드A는 중복 지정되어 있다.(그림 좌측) 이러한 경우, OPMATE는 태스크의 수행 대상 노드를 합집합의 형태로 관리하게 된다.(그림 우측)\n스케쥴 (Schedule) 태스크가 자동으로 실행될 시점을 정의한다. 다음과 같이 주기에 따른 값을 지정할 수 있다.\n주기 지정값 비고 매시 mm분 mm : 00 ~ 59 매일 hh시 mm분 hh : 00 ~ 23 매주 WWW hh시 mm분 WWW : sun|mon|tue|wed|thu|fri|sat 매월 DD일 hh시 mm분 DD : 01 ~ 31 매년 MM월 DD일 hh시 mm분 MM : 01 ~ 12 한번 YYYY년 MM월 DD일 hh시 mm분 YYYY : 2000~9999 하나의 태스크에는 하나 이상의 스케줄을 지정할 수 있다.\n예를 들면, 분기에 한 번 수행하는 태스크가 있다면 아래와 같이 4개의 스케줄을 지정하여 처리 가능하다.\nquarter01 : (매년)03월 31일 01시 00분 quarter02 : (매년)06월 30일 01시 00분 quarter03 : (매년)09월 30일 01시 00분 quarter04 : (매년)12월 31일 01시 00분 실행 방식 태스크를 실행하는 방식은 다음 3가지이며, 각각 활성화(enable)/비활성화(disable) 할 수 있다.\nBy 스케쥴러 등록된 스케쥴에 의해서 실행되는 방식 By 온디맨드 사용자가 직접 명령하여 바로 실행되는 방식 By 태스크 다른 태스크가 다음 태스크(Next Task)로 지정하여 실행되는 방식 실행 권한 사용자에 의한 온디맨드 실행방식과 다른 태스크에 의한 실행방식은 실행주체를 정의해줘야 실행이 가능해진다. 실행주체는 사용자(User), 사용자그룹(User Group), 태스크(Task)가 대상이 될 수 있다. 단, 태스크의 소유자(Owner)는 별도로 부여하지 않아도 실행이 가능하다.\n실행 사용자에 의해서 정의되고, 검토자에 의해서 승인되면 태스크는 실행을 위한 모든 절차가 완료된다.\n태스크의 실행은 위의 실행 방식 절에서 설명한 것과 같이 수행할 수 있으며,\n사용자가 태스크를 실행하는 온디맨드의 경우는 사전에 지정된 대상 노드 중에 일부만을 실행 시점에 지정하여 실행하거나 스크립트에 명령행 인자를 전달할 수도 있다.\n태스크의 정의와 그에 대한 승인이 완료되면 사용자는 OPMATE 의 CLI를 통해서 아래와 같이 태스크를 실행 할 수 있다. (온디멘드 수행을 가능하도록 정의한 경우)\n$ opmate task run -id diskusage task-instance #71 has been created successfully. $ opmate task run -id diskusage -ni linux01 task-instance #72 has been created successfully.\r위 예제에서는 diskusage 라는 ID의 동일한 태스크를 2회에 걸쳐서 수행하고 있다. 첫 번째 수행에서는 태스크의 타겟으로 정의한 모든 노드에 대해서 수행하고, 두 번째 수행에서는 특정 노드에 대해서만 수행하고 있다.\n실행 결과에서 보여지듯이 71,72번의 태스크 인스턴스가 성공적으로 생성되었다고 사용자에게 보고하고 있다. 태스크를 수행하는 경우 태스크 인스턴스가 생성되며 사용자는 이에 대한 내용(태스크 수행과 관련한 상태)을 다음 절에서 설명할 태스크 인스턴스 객체의 조작을 통해 확인할 수 있다.\n다음 태스크 (Next Task) 태스크 실행이 정상적으로 완료(모든 타겟노드의 실행결과가 성공)된 후 자동으로 다른 태스크가 실행되도록 하고 싶을 경우에 지정한다.\n단, 호출되는 태스크에서 실행 권한을 부여해줘야 한다. 예를 들어, A태스크가 B태스크를 Next Task로 실행하고자 한다면, B태스크의 권한설정에 A태스크를 실행 가능 태스크로 추가해야 한다.\n승인(Approval)과 리비젼(Revision) 신규로 추가되거나, 변경된 태스크는 작업본(리비젼 번호 0) 상태로만 존재하고, 실제로 실행되기 위해서는 승인 과정을 거쳐야 한다.\n승인은 태스크의 소유자가 검토자 권한을 가진 사용자에게 요청한다.\n검토자는 승인 요청을 확인하고, 승인 또는 거절을 할 수 있다. 이 과정에서 태스크의 정의(스크립트/대상 노드 등)를 Cross-Check하여, 작업 위험을 감소시킬 수 있다.\n검토자에 의해 승인된 태스크는 리비젼 번호가 갱신된다. 리비젼 번호는 1부터 시작하며 승인시마다 1씩 증가한다.\n태스크의 리비젼 목록을 조회할 수 있으며, 리비젼 번호를 지정하여 해당 리비젼의 태스크 정의를 조회할 수 있다.\n","date":"0001-01-01","id":39,"permalink":"/hugo-test2/v11/manual/usermanual6/","summary":"\u003ch2 id=\"태스크-task\"\u003e태스크 (Task)\u003c/h2\u003e\n\u003cp\u003e태스크는 하나 이상의 노드를 대상으로 동일한 작업(스크립트)을 동시에 실행하기 위한 작업 정의서이다.\u003c/p\u003e\n\u003cp\u003e태스크의 생성은 작업자 이상의 권한을 가지고 있으면 가능하고, 생성한 사용자가 해당 태스크의 소유자(Owner)가 된다.\u003c/p\u003e","tags":[],"title":"6. 태스크"},{"content":"드디어, 태스크 실행입니다.\n$ opmate task run -id diskusage Requesting https://127.0.0.1:8443/opmate;user=bumbee Instance(142) of task has been created.\r태스크를 한번 실행하면 그와 대응하는 태스크 인스턴스(Task Instance)가 만들어집니다. 위에서는 142으로 인스턴스가 생성되었고, 이 번호는 전체 태스크에서 고유한 번호입니다.\n태스크 diskusage의 인스턴스를 조회해보겠습니다.\n$ opmate task listrun -id diskusage Requesting https://127.0.0.1:8443/opmate;user=bumbee +------------------+---------------------+---------------------+--------------+-----------+ | TASK INSTANCE NO | START DT | END DT | RUNNER | NEXT TASK | +------------------+---------------------+---------------------+--------------+-----------+ | 142 | 2019/04/30 17:49:54 | 2019/04/30 17:50:07 | bumbee(User) | | +------------------+---------------------+---------------------+--------------+-----------+ ROWS COUNT : 1/1\r태스크 정의 후 최초 실행이라 목록에서 하나만 보입니다. 인스턴스별 시작시간과(START DT)과 종료시간(END DT)이 출력되는데, 종료시간이 표시된다는 것은 태스크의 타겟 노드 전체가 완료되었다는 의미입니다. 단 한개의 노드라도 완료되지 않으면 표시되지 않습니다.\n이 인스턴스의 타겟 노드별 결과도 확인해보겠습니다.\n$ opmate task listrunnode -in 142 Requesting https://127.0.0.1:8443/opmate;user=bumbee +---------+---------+----------+---------------------+---------------------+---------+---------+ | NODE ID | EXEC NO | STATUS | START DT | END DT | RESULT | EXIT CD | +---------+---------+----------+---------------------+---------------------+---------+---------+ | linux01 | 1 | Complete | 2019/04/30 17:50:03 | 2019/04/30 17:50:03 | Success | 0 | | linux02 | 1 | Complete | 2019/04/30 17:50:03 | 2019/04/30 17:50:03 | Success | 0 | +---------+---------+----------+---------------------+---------------------+---------+---------+\r각 노드별로 진행상태 및 결과가 출력되는군요.\n하나의 노드를 지정해서 조금 더 상세히 조회해 보겠습니다.\n$ opmate task viewrun -in 142 -ni linux01 Requesting https://127.0.0.1:8443/opmate;user=bumbee +------------------+---------------------+ | FIELD | VALUE | +------------------+---------------------+ | TASK INSTANCE NO | 142 | | TASK ID | diskusage | | NODE ID | linux01 | | EXEC NO | 1 | | STATUS | Complete | | START DT | 2019/04/30 17:50:03 | | END DT | 2019/04/30 17:50:03 | | RUNNER | bumbee(User) | | RESULT | Success | | EXIT CD | 0 | +------------------+---------------------+ [Standard error] No content. [Standard output] Filesystem Size Used Avail Use% Mounted on /dev/mapper/centos-root 50G 1.3G 49G 3% / devtmpfs 486M 0 486M 0% /dev tmpfs 496M 0 496M 0% /dev/shm tmpfs 496M 6.6M 490M 2% /run tmpfs 496M 0 496M 0% /sys/fs/cgroup /dev/sda1 1014M 153M 862M 16% /boot /dev/mapper/centos-home 47G 101M 47G 1% /home tmpfs 100M 0 100M 0% /run/user/0\r스크립트의 실행결과인 표준에러와 표준출력을 확인할 수 있습니다.\n지금까지 간단한 예제를 통해 기초적인 이해와 사용 방법을 익히셨습니다. 실전에서 사용하기 위한 세부적인 내용과 다양한 명령어는 사용자 매뉴얼과 Command Line Usage를 참고하시기 바랍니다.\n","date":"0001-01-01","id":40,"permalink":"/hugo-test2/v10/tutorial/quicktutorial6/","summary":"\u003cp\u003e드디어, 태스크 실행입니다.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ opmate task run -id diskusage\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eRequesting https://127.0.0.1:8443/opmate\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nv\"\u003euser\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ebumbee\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInstance\u003cspan class=\"o\"\u003e(\u003c/span\u003e142\u003cspan class=\"o\"\u003e)\u003c/span\u003e of task has been created.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e태스크를 한번 실행하면 그와 대응하는 태스크 인스턴스(Task Instance)가 만들어집니다.\n위에서는 142으로 인스턴스가 생성되었고, 이 번호는 전체 태스크에서 고유한 번호입니다.\u003c/p\u003e","tags":[],"title":"6. 태스크 실행"},{"content":" OPMATE는 태스크 구성 및 실행을 위해 필요한 파일 다운로드 \u0026amp; 업로드 기능을 지원합니다.\n이 기능을 통해 특정 노드에 패치 파일을 배포하거나, 반대로 태스크 실행 결과 파일을 사용자 환경으로 가져올 수도 있습니다.\n주 사용법은 다음과 같습니다:\nCLI, WebConsole → Master\n설치, 패치 등에 필요한 파일을 Master 서버로 업로드합니다. Master → Agent\nMaster 서버에 업로드된 파일을 Agent가 설치된 서버로 다운로드합니다. Agent → Master\nAgent가 설치된 서버에서 생성된 파일을 Master 서버로 업로드합니다. Master → CLI, WebConsole\nMaster 서버에 업로드된 파일을 사용자 환경으로 다운로드합니다. 파일허브 파일허브(Filehub)는 파일 송수신을 위한 임시 보관소입니다. Master 서버로 업로드된 모든 파일은 지정된 파일허브 디렉터리에 저장됩니다.\n파일허브는 CLI, WebConsole에서 생성 및 관리할 수 있으며, 파일허브 ID로 구분됩니다. CLI 명령어 OPMATE CLI의 file 명령어로 사용자 환경에서 파일허브에 있는 파일에 접근할 수 있습니다. file list, file get, file put, file delete 총 4가지 명령어가 있습니다:\n## 파일 업로드 $ opmate file put -rp master:/myfilehub/a.txt -lp /tmp/a.txt ## 파일 조회 $ opmate file list -rp master:/myfilehub/ ## 파일 다운로드 $ opmate file get -rp master:/myfilehub/a.txt -lp /tmp/a.txt -ow ## 파일 삭제 $ opmate file delete -rp master:/myfilehub/a.txt\rCLI 명령어를 활용하려면 현재 로그인된 사용자가 파일허브 권한을 가지고 있어야 합니다.\n또한 filehub 명령어를 통해 파일허브를 생성하거나 관리할 수 있습니다:\n$ opmate filehub --help ... actions: list 파일 허브 목록 출력 view 파일 허브 상세 출력 create 파일 허브 생성 edit 파일 허브 수정 delete 파일 허브 삭제 addperm 퍼미션 추가 rmperm 퍼미션 제거\r스크립트 예약어 태스크 스크립트 작성 시 예약어로 스크립트 단에서 파일 관련 기능을 활용할 수 있습니다.\n이를 통해 스크립트에서 파일허브를 일종의 원격 디렉터리로 활용할 수 있습니다.\nFILE_PUT, FILE_GET, FILE_LS 총 3가지 예약어가 있습니다:\nFILE_LS : 파일 조회 Usage : @OPM_ATTR.FILE_LS@ \u0026lt;master:/master-directory-path\u0026gt; [glob] Example : @OPM_ATTR.FILE_LS@ master:/myfilehub/textfile/ \u0026#34;*.txt\u0026#34;\rFILE_PUT : 파일허브로 파일 업로드 Usage : @OPM_ATTR.FILE_PUT@ [–-overwrite] \u0026lt;master:/filehub-id/master-file-path\u0026gt; \u0026lt;local-file-path\u0026gt; Example : @OPM_ATTR.FILE_PUT@ --overwrite master:/myfilehub/tomcat.tar.gz /tmp/tomcat.tar.gz\rFILE_GET : 파일허브에서 파일 다운로드 Usage : @OPM_ATTR.FILE_GET@ [–-overwrite] \u0026lt;master:/filehub-id/master-file-path\u0026gt; \u0026lt;local-file-path\u0026gt; Example : @OPM_ATTR.FILE_GET@ --overwrite master:/myfilehub/hostname/passwd /etc/passwd 스크립트 예약어를 사용하려면 반드시 스크립트를 실행하는 태스크가 파일허브 권한을 가지고 있어야 합니다.\nCLI 튜토리얼 : 파일 다운로드 \u0026amp; 업로드 다음과 같이 간단한 튜토리얼을 통해 파일 다운로드 업로드 과정을 학습해봅니다:\n파일허브 생성 및 권한 부여\n파일 배포 (CLI → Master → Agent)\n파일 수집 (Agent → Master → CLI) 1. 파일허브 생성 및 권한 부여 OPMATE CLI에 로그인한 후, filehub create로 myfilehub란 이름의 파일허브를 생성합니다.\n$ opmate filehub create -id myfilehub myfilehub has been created successfully.\r이제 생성한 파일허브를 filehub view로 조회해 보겠습니다:\n$ opmate filehub view -id myfilehub +------------+------------------------------------+ | FIELD | VALUE | +------------+------------------------------------+ | ID | myfilehub | | OWNER | gildong | | CREATED | 2024-01-01 09:00:00 UTC BY gildong | | UPDATED | 2024-01-01 09:00:00 UTC BY gildong | +------------+------------------------------------+ | PERMISSION | | +------------+------------------------------------+\rowner가 태스크 생성자인 gildong으로 설정된 걸 확인할 수 있습니다. gildong은 파일허브의 소유자이므로 별도의 권한 설정 없이 파일허브 내의 모든 파일에 대한 권한을 가집니다.\n다른 유저에게도 권한을 부여하고 싶다면 filehub addperm 명령어를 통해 파일허브 권한 목록을 업데이트해야 합니다. 2. 파일 배포 (CLI → Master → Agent) 간단한 텍스트 파일을 현재 디렉터리에 생성한 후, 이를 파일허브에 전송해 보겠습니다.\n이 후 해당 파일을 타겟 노드에 배포해 보겠습니다.\n우선 a.txt란 텍스트 파일을 생성합니다:\n$ vi a.txt \u0026gt; i love opmate\r이 후 file put 명령어를 사용하여 텍스트 파일을 myfilehub 파일허브에 업로드합니다.\n파일을 업로드할 디렉터리는 master:/myfilehub/textfile/a.txt 입니다.\n여기서 'master:/myfilehub'는 파일허브 자체의 디렉터리고, 'textfile'은 파일 허브 상의 하위 디렉터리며, 없을 시 자동으로 생성됩니다.\n$ opmate file put -lp a.txt -rp master:/myfilehub/textfile/a.txt ... checksum success\rlp 파라미터는 전송할 파일의 로컬 파일 디렉터리를 지정하며,\nrp 파라미터는 파일이 저장되는 myfilehub 파일허브 상의 파일 디렉터리를 지정합니다.\n파일이 정상적으로 전송되었다면 우선 file list 명령어를 통해 myfilehub 파일허브의 루트 디렉터리를 조회합니다:\n$ opmate file list -rp master:/myfilehub +----------+------+-------------------------+-----------+-----------+ | NAME | SIZE | DATE | TYPE | VALID_DAY | +----------+------+-------------------------+-----------+-----------+ | textfile | 19 | 2024-01-01 09:30:00 KST | directory | 0 | +----------+------+-------------------------+-----------+-----------+ ROW COUNT : 1/1\rmyfilehub의 루트 디렉터리에 textfile이라는 하위 디렉터리가 생성되었습니다.\n이제 myfilehub/textfile을 조회해 보겠습니다:\n$ opmate fi list -rp master:/myfilehub/textfile +-------+------+-------------------------+------+-----------+ | NAME | SIZE | DATE | TYPE | VALID_DAY | +-------+------+-------------------------+------+-----------+ | a.txt | 15 | 2024-01-01 09:30:00 KST | file | 13 | +-------+------+-------------------------+------+-----------+ ROW COUNT : 1/1\ra.txt 파일이 정상적으로 업로드되었습니다.\n이제 파일허브에 업로드된 a.txt를 타겟 노드로 배포해 보겠습니다.\n타겟 노드로의 파일 전송은 Master와 Agent 간의 통신을 통해 이루어지며,\nOPMATE 태스크의 스크립트를 사용하여 수행할 수 있습니다.\n먼저 태스크 생성에 필요한 TDF 파일과 스크립트 파일을 작성합니다.\nTDF 파일은 사용자 환경에 맞게 설정을 변경합니다. (ex. script-account, node-set 등)\n$ vi textupload.tdf --- id: textupload owner: gildong # 현재 유저명로 변경 script-account: root # Shell을 실행하는 OS 계정명으로 변경 description: \u0026#34;Text Upload\u0026#34; publisher: gildong # 현재 유저명으로 변경 target: - node-set: OS-TYPE:\u0026#34;^Linux$\u0026#34; # Node-set을 현재 연결된 노드에 따라 변경 account: root description: OS가 Linux인 모든 노드 대상으로 태스크 실행 ...\r$ vi textupload.sh #!/bin/sh ## 파일 다운로드 @OPM_ATTR.FILE_GET@ --overwrite master:/myfilehub/textfile/a.txt /tmp/a.txt ## 파일 내용 출력 cat /tmp/a.txt\r이 후 생성한 파일을 토대로 태스크를 생성합니다.\n태스크 생성과 실행에 관해선 Tutorial 4, Tutorial 5를 참고해 주세요.\n$ opmate task create -tf textupload.tdf -sf textupload.sh textupload has been created successfully.\r태스크 생성 후 해당 태스크에 myfilehub 파일허브에 대한 권한을 부여합니다.\n$ opmate filehub addperm -id myfilehub -ts textupload -mo rwx myfilehub has been modified successfully. $ opmate filehub view -id myfilehub +------------+------------------------------------+ | FIELD | VALUE | +------------+------------------------------------+ | ID | myfilehub | | OWNER | gildong | | CREATED | 2024-01-01 14:00:00 KST BY gildong | | UPDATED | 2024-01-01 14:00:00 KST BY gildong | +------------+------------------------------------+ | PERMISSION | textupload(task) : rwx | +------------+------------------------------------+\r여기서 유의할 점은 스크립트에서 파일 관련 예약어를 사용할 때 파일허브 권한이 필요한 대상은 유저 gildong이 아니라 태스크 textupload입니다. 이는 파일 전송의 주체가 태스크를 실행하는 Agent이기 때문입니다.\n이후 태스크를 배포하고, 실행합니다. 만약 Role이 부여되지 않았다면, 현재 유저에게 Role을 부여하거나 Node-set을 변경하여 태스크를 실행할 수 있습니다.\n$ opmate task publish -id textupload ... textupload has been published successfully. $ opmate execute run -ts textupload ... execution #1 has been created successfully.\r이제 태스크 실행 결과를 확인합니다. Execution ID와 Node Session ID를 적절히 합니다.\n$ opmate execution listnode -id 1 +------------------------------+------------+-------------+--------+--------+ | NODE-SESSION-ID | HOSTNAME | REMOTE-ADDR | STATUS | RESULT | +------------------------------+------------+-------------+--------+--------+ | 635df610-fd46-4c6a-b9ae-78c4 | opmate-dev | 123.0.0.1 | comple | succes | | 92c00147 | | | ted | s | | 10ca6b2e-ee06-48f1-a5eb-236f | opmate-db | 123.0.0.2 | comple | succes | | 4c5b2aac | | | ted | s | +------------------------------+------------+-------------+--------+--------+ ROW COUNT : 2/2 $ opmate execution viewnode -id 1 -nd 635df610-fd46-4c6a-b9ae-78c492c00147 +-----------------+--------------------------------------+ | FIELD | VALUE | +-----------------+--------------------------------------+ | NODE-SESSION-ID | 635df610-fd46-4c6a-b9ae-78c492c00147 | | HOSTNAME | opmate-dev | | REMOTE-ADDRESS | 123.0.0.1 | | ACCOUNT | root | | STATUS | completed | | RESULT | success | | EXIT-NUM | 0 | | FORCE-STOP | n/a | | START-DATE | 2024-01-01 15:00:00 KST | | END-DATE | 2024-01-01 15:00:00 KST | +-----------------+--------------------------------------+ [STDOUT] i love opmate. [STDERR] No content.\ra.txt가 전송되어 STDOUT으로 파일 내용이 출력됩니다: i love opmate.\n3. 파일 수집 (Agent → Master → CLI) 각 노드에서 /etc/passwd 파일을 개별적으로 수집해 저장해 보겠습니다.\n우선 이전 단계와 비슷한 과정으로 먼저 TDF 파일과 스크립트 파일을 작성합니다.\n$ vi passwdcollect.tdf --- id: datacollect owner: gildong # 현재 유저명로 변경 script-account: root # Shell을 실행하는 OS 계정명으로 변경 description: \u0026#34;Collect /etc/passwd from Node-set\u0026#34; publisher: gildong # 현재 유저명으로 변경 target: - node-set: OS-TYPE:\u0026#34;^Linux$\u0026#34; # Node-set을 현재 연결된 노드에 따라 변경 account: root description: OS가 Linux인 모든 노드 대상으로 태스크 실행 ...\r$ vi passwdcollect.sh #!/bin/sh subdir=$(hostname) ## 각 노드의 /etc/passwd 파일을 /myfilehub/$hostname/passwd 로 복사 @OPM_ATTR.FILE_PUT@ --overwrite master:/myfilehub/$subdir/passwd /etc/passwd\r해당 스크립트는 타겟 노드의 호스트명을 하위 디렉터리로 하여 /etc/passwd 파일을 저장합니다.\n이 후 TDF, 스크립트 파일을 기반으로 해당 태스크를 생성, 배포, 실행합니다. 과정 중간에 passwdcollect 태스크에 파일허브에 대한 권한 또한 부여합니다.\n$ opmate task create -tf passwdcollect.tdf -sf passwdcollect.sh passwdcollect has been created successfully.\r$ opmate filehub addperm -id myfilehub -ts passwdcollect -mo rwx myfilehub has been modified successfully.\r$ opmate task publish -id passwdcollect ... passwdcollect has been published successfully.\r$ opmate execute run -ts passwdcollect ... execution #2 has been created successfully.\r태스크 실행까지 마치면 myfilehub 파일허브를 다시 조회해봅니다.\n$ opmate file list -rp master:/myfilehub/ +-----------------+------+-------------------------+-----------+-----------+ | NAME | SIZE | DATE | TYPE | VALID_DAY | +-----------------+------+-------------------------+-----------+-----------+ | opmate-dev | 20 | 2024-01-01 20:00:00 KST | directory | 0 | | opmate-db | 20 | 2024-01-01 20:00:00 KST | directory | 0 | +-----------------+------+-------------------------+-----------+-----------+ ROW COUNT : 2/2\r타겟 노드인 opmate-dev와 opmate-dev 이름으로 두 개의 디렉터리가 생성된 것을 확인할 수 있습니다.\n이 중 opmate-dev 디렉터리를 확인해보면\n$ opmate file list -rp master:/myfilehub/opmate-dev +--------+------+-------------------------+------+-----------+ | NAME | SIZE | DATE | TYPE | VALID_DAY | +--------+------+-------------------------+------+-----------+ | passwd | 2113 | 2024-01-01 20:00:00 KST | file | 13 | +--------+------+-------------------------+------+-----------+ ROW COUNT : 1/1\ropmate-dev 노드의 /etc/passwd 파일이 정상적으로 업로드된 것을 확인할 수 있습니다.\n해당 파일을 file get 명령어로 사용자 환경으로 다운로드해 보겠습니다.\n$ opmate file get -lp /tmp/passwd -rp master:/myfilehub/opmate-dev/passwd ... checksum success $ cat /tmp/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin ...\rpasswd 파일이 정상적으로 다운로드되었습니다.\n","date":"0001-01-01","id":41,"permalink":"/hugo-test2/v2/tutorial/tutorial6/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eOPMATE\u003c/strong\u003e는 태스크 구성 및 실행을 위해 필요한 \u003cstrong\u003e\u003cu\u003e파일 다운로드 \u0026amp; 업로드\u003c/u\u003e\u003c/strong\u003e 기능을 지원합니다.\u003c/p\u003e\n\u003cp\u003e이 기능을 통해 특정 노드에 패치 파일을 배포하거나, 반대로 태스크 실행 결과 파일을 사용자 환경으로 가져올 수도 있습니다.\u003c/p\u003e","tags":[],"title":"6. 파일 전송"},{"content":"태스크 인스턴스 (Task Instance) 태스크를 실행하면, 실행마다 새로운 태스크 인스턴스가 생성된다.\n하나의 태스크 인스턴스는 전체 태스크에서 유일한 태스크 인스턴스 번호 (Task Instance No.) 가 부여된다.\n태스크 인스턴스에 관한 주요한 요청들은 이 태스크 인스턴스 번호 를 기준으로 수행된다.\n노드별 상세 태스크의 수행 시에 생성된 태스크 인스턴스 번호와 태스크의 노드를 지정하면 태스크 인스턴스의 노드별 상세를 확인할 수 있다. 각 노드별로 다음과 같은 속성값을 가지고 있다.\n진행 상태\n준비 : 노드에 아직 실행 요청을 보내기 전 상태\n요청(실행중) : 노드에 실행 요청을 보낸 상태\n완료 : 노드가 스크립트를 수행하고 실행 결과를 회신한 상태\n실패 : 기타 이유(e.g. 스크립트 다운로드 불가 등)로 스크립트를 실행도 못한 경우\n실행 결과\nN/A\n성공 : 스크립트의 실행 결과 코드가 0 인 경우\n실패 : 진행 상태가 실패이거나, 스크립트의 실행 결과 코드가 0 이 아닌 경우\n실행 결과 코드\n스크립트의 최종 종료값\n표준출력/표준에러\n스크립트 실행 중 발생한 표준출력과 표준에러 $ opmate taskinstance viewnode -in 71 -ni linux01 +------------------+---------------------+ | FIELD | VALUE | +------------------+---------------------+ | TASK INSTANCE NO | 71 | | TASK ID | diskusage | | NODE ID | linux01 | | EXEC NO | 1 | | STATUS | Complete | ☜ 진행 상태 | START AT | 2020/03/03 15:08:04 | | END AT | 2020/03/03 15:08:04 | | CREATED BY | bumbee(user) | | RESULT | Success | ☜ 실행 결과 | EXIT CD | 0 | ☜ 실행 결과 코드 +------------------+---------------------+ [STDERR] ☜ 표준에러 No content. [STDOUT] ☜ 표준출력 Filesystem Size Used Avail Use% Mounted on /dev/mapper/centos-root 50G 1.3G 49G 3% / devtmpfs 486M 0 486M 0% /dev tmpfs 496M 0 496M 0% /dev/shm tmpfs 496M 6.6M 490M 2% /run tmpfs 496M 0 496M 0% /sys/fs/cgroup /dev/sda1 1014M 153M 862M 16% /boot /dev/mapper/centos-home 47G 101M 47G 1% /home tmpfs 100M 0 100M 0% /run/user/0\r태스크 인스턴스 번호를 지정하여 해당 태스크 인스턴스 번호의 요약 정보를 확인할 수도 있고, 모든 노드들의 속성 정보를 표의 형식으로 확인할 수도 있다.\n또한 단일 태스크 인스턴스 번호에 해당하는 모든 노드의 속성들을 특정한 *(CSV, Comma Separator Values)*형식의 파일로 일괄 취합할 수도 있다.\n노드 단위 재실행 이미 생성된 태스크 인스턴스에 대하여, 특정 노드를 지정하여 노드 단위로 재실행할 수 있다.\n태스크 인스턴스의 재수행은 앞 절(태스크)의 태스크 수행과 유사하지만 조금은 다른 개념이다.\n특정 노드만을 재실행하는 경우에는 태스크 인스턴스 번호는 동일하나,\n재실행한 노드에 한해서 실행번호(Execution No.)만 증가하게 된다.\n주로 태스크 실행 결과에 대한 검증(실패 원인 분석) 또는 재처리 등에 사용할 수 있다.\n단, 태스크 인스턴스의 생성 시점 이후에 태스크의 리비젼이 변경되었을 경우 재실행은 불가하다.\n","date":"0001-01-01","id":42,"permalink":"/hugo-test2/v11/manual/usermanual7/","summary":"\u003ch2 id=\"태스크-인스턴스-task-instance\"\u003e태스크 인스턴스 (Task Instance)\u003c/h2\u003e\n\u003cp\u003e태스크를 실행하면, 실행마다 새로운 태스크 인스턴스가 생성된다.\u003c/p\u003e\n\u003cp\u003e하나의 태스크 인스턴스는 전체 태스크에서 유일한 \u003cstrong\u003e태스크 인스턴스 번호 (Task Instance No.)\u003c/strong\u003e 가 부여된다.\u003cbr\u003e\n태스크 인스턴스에 관한 주요한 요청들은 이 \u003cstrong\u003e태스크 인스턴스 번호\u003c/strong\u003e 를 기준으로 수행된다.\u003c/p\u003e","tags":[],"title":"7. 태스크 인스턴스"},{"content":"파일 배포/수집 OPMATE 에서는 사용자가 태스크를 구성하고, 수행하는데에 필요한 파일과 관련한 유틸리티를 제공하고 있다.\n특정 노드로 설치나 설정에 필요한 파일을 배포하거나, 반대로 태스크 수행으로써 생성된 파일 형태의 결과물을 수집하는데에 이용할 수 있다.\n아래의 그림에서는 OPMATE 의 CLI/Master/Agent 상호 간의 파일의 배포/수집과 관련한 관계를 보여준다.\n그림과 같이 파일은 OPMATE Master 의 File Repository 와의 상호 작용으로 취급할 수 있으며, 배포/수집의 주체는 Master가 아닌 CLI 와 Agent가 설치된 노드 이다.\nCLI 명령어 또는 Agent가 태스크를 수행할 때에 스크립트에 기술된 명령을 통해, Master의 File Repository를 조회하거나 파일을 업로드/다운로드 할 수 있다.\n여기서 주의할 점은 File Repository는 자료의 영구적인 보관 공간이 아닌 임시 보관 공간이라는 점이다.\nFile Repository 의 데이터는 일정 기간이 경과하면 자동 삭제되므로, 태스크에서 대량 파일의 수집과 배포를 수행하기 위한 한시적인 공간이라는 것을 유의하기 바란다.\n태스크에서의 사용 태스크에 정의된 스크립트에서는 아래의 세가지 OPMATE 파일 유틸리티의 사용이 가능하다.\nopmfls : File Repository 의 파일 조회\nUsage : opmfls \u0026lt;token\u0026gt; \u0026lt;master:/master-directory-path\u0026gt; [glob]\nopmfput : File Repository 로의 파일 업로드\nUsage : opmfput [\u0026ndash;overwrite] \u0026lt;token\u0026gt; \u0026lt;master:/master-file-path\u0026gt; \u0026lt;local-file-path\u0026gt;\nopmfget : File Repository 에서 파일 다운로드\nUsage : opmfget [\u0026ndash;overwrite] \u0026lt;token\u0026gt; \u0026lt;master:/master-file-path\u0026gt; [local-file-path]\n파일 조회는 지정한 원격 경로(File Repository)에 존재하는 파일의 목록을 보여주며, 이 때 하위 디렉토리 및 그에 속한 파일은 조회할 수 없다. (서버 보안 유지)\n조회대상 파일명에는 glob 패턴을 사용할 수 있다.(glob : 와일드카드 문자로 여러 파일 이름의 집합을 지정. UNIX 계열 환경에서 사용되는 것과 동일함.)\n파일의 업로드와 다운로드는 개별 파일에 대해서 원격 경로(File Repository)와 로컬 경로를 지정하여 사용할 수 있다.(다건 전송 불가)\n원격의 경로를 지정할 때에는 File Repository 의 루트 디렉토리*(OS의 루트 디렉토리가 아님)*로 부터의 절대 경로로 표현한다.\n태스크에서 파일 유틸리티를 사용할 때에는 토큰(token)이라는 개념을 사용하며, 파일 유틸리티 사용 시에는 다음과 같은 OPMATE 의 예약어를 사용하여 전달해야 한다.\n@OPM_ATTR.FILE_TOKEN@\n위와 같이 스크립트에서 사용하면, 에이전트는 태스크 수행 직전에 해당 예약어를 치환하고 수행하게 된다. 태스크의 스크립트를 에이전트가 수행할 때에만 파일 유틸리티 사용이 가능하다.\n아래는 스크립트에서 파일 유틸리티를 사용하는 예를 보여준다. 위의 opmfget 사용법과 비교하여 보기를 바란다.\n#!/bin/sh token=\u0026#34;@OPM_ATTR.FILE_TOKEN@\u0026#34; opmfget $token master:/mydir/install-apache.tar.gz /home/web/install-apache.tar.gz\r어떠한 태스크에서는 태스크에 지정된 스크립트에서 별도의 백그라운드 프로세스를 호출하여, 태스크 종료 후에도 태스크와 관련된 수행이 지속될 수 있다. 토큰은 태스크 실행 중에만 유효하므로 아래와 같은 형식으로 지정하면 태스크가 종료되어도 해당 태스크에서 호출된 백그라운드 프로세스에서도 파일 유틸리티의 사용이 가능하다.\n@OPM_ATTR.FILE_TOKEN/10M@ : 토큰의 유효 시간을 태스크 종료와 상관 없이 10분으로 지정\n@OPM_ATTR.FILE_TOKEN/10H@ : 토큰의 유효 시간을 태스크 종료와 상관 없이 10시간으로 지정\n☞ 최대 24시간까지 지정 가능\nCLI에서의 사용 CLI 의 사용법과 관련한 내용은 매뉴얼의 \u0026ldquo;별첨 #1. CLI 사용법\u0026rdquo; 에서 소개하고 있으며 CLI 의 help 명령어를 통해서 확인 가능하다. 여기서는 관련된 주요 개념과 태스크에서 사용하는 파일 유틸리티와의 차이점을 위주로 언급한다.\nCLI 에서는 제공되는 다른 CLI 명령어들과 유사하게 사용할 수 있으며, 다음과 같은 세 가지 명령을 사용할 수 있다.\nopmate file list : File Repository 의 파일 조회\nopmate file put : File Repository 로의 파일 업로드\nopmate file get : File Repository 에서 파일 다운로드\n파일 조회는 태스크의 파일 유틸리티와 동일하게 사용자가 지정한 원격 경로(File Repository)에 존재하는 파일의 목록을 보여주며, 이 때 하위 디렉토리 및 그에 속한 파일은 조회할 수 없다.\n파일의 업로드와 다운로드도 태스크의 파일 유틸리티와 유사한 기능이나, 전송의 주체는 Agent가 아닌 CLI 이다.\nCLI에서는 위의 명령어들을 통해서 태스크를 통해 노드로 배포할 파일을 File Repository에 업로드하거나, 태스크 수행의 결과로서 File Repository에 수집된 파일들을 다운로드하여 확인할 수 있다.\n여러 노드에 파일을 배포하기 위해서는 사용자가 업로드한 File Repository 경로와 파일명을 태스크의 스크립트에도 정확히 기술해줘야 하며, 파일을 수집할 때에도 이는 마찬가지이다.\n태스크의 파일 유틸리티 사용과는 달리 token 은 존재하지 않으니, 앞서 설명한 바와 같이 File Repository는 임시 공간이라는 점만 유의하여 사용하면 된다.\n","date":"0001-01-01","id":43,"permalink":"/hugo-test2/v11/manual/usermanual8/","summary":"\u003ch2 id=\"파일-배포수집\"\u003e파일 배포/수집\u003c/h2\u003e\n\u003cp\u003eOPMATE 에서는 사용자가 태스크를 구성하고, 수행하는데에 필요한 파일과 관련한 유틸리티를 제공하고 있다.\u003c/p\u003e\n\u003cp\u003e특정 노드로 설치나 설정에 필요한 파일을 배포하거나, 반대로 태스크 수행으로써 생성된 파일 형태의 결과물을 수집하는데에 이용할 수 있다.\u003c/p\u003e","tags":[],"title":"8. 파일 배포/수집"},{"content":"","date":"0001-01-01","id":44,"permalink":"/hugo-test2/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":45,"permalink":"/hugo-test2/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":46,"permalink":"/hugo-test2/tags/","summary":"","tags":[],"title":"Tags"},{"content":"CLI 사용법 사용자가 명령을 실행하기 위한 클라이언트 프로그램인 OPMATE CLI*(Command Line Interface)*의 사용법을 개략적으로 설명한다.\nCLI 명령어는 운영체제의 쉘에서 제공하는 다양한 명령어들과 적절히 결합하여, 연속적인 질의를 하거나 원하는 결과 만을 취합하는 형태로의 사용이 가능하다. (리눅스의 쉘스크립트 파일 내에서 사용 가능)\n다음은 운영체제 쉘에서 OPMATE CLI 명령어와 grep 명령어를 결합하여, linux_tomcat 노드 그룹의 조회 결과 중 prod 키워드를 포함하는 노드ID 만을 출력하는 예시이다.\n$ opmate nodegroup view -id linux_tomcat | grep \u0026#39;prod\u0026#39; | | linux-prodap01 | | | linux-prodap02 | | | linux-proddb01 | | | linux-proddb02 |\r명령어 구성 CLI 명령어는 object, action, arguments 의 3가지 레벨로 구성되어 있으며, 이를 조합하여 OPMATE Master에 적절한 요청을 할 수 있다.\n$ opmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; [\u0026lt;arguments\u0026gt;]\nobject : OPMATE 를 구성하는 주요 요소들의 집합.(사용자/노드/태스크 등)\naction : 지정한 object 에 대해서 수행하려는 명령.(생성/수정/삭제/목록 조회/상세보기 등)\narguments : action 에 종속적인 인자(파라미터)\n도움말(help) CLI 에서는 적절한 명령어를 입력하지 않으면, 잘못된 입력에 대해서 적절한 명령을 입력할 수 있도록 사용자에게 CLI 의 사용법을 보여준다.\nCLI 의 사용법은 object, action, arguments 의 각 레벨에 따라서 적절한 명령을 입력할 수 있도록 제공된다.\n또한, 각 레벨의 Command 대신에 명시적으로 help 키워드를 사용하여 사용법을 확인할 수도 있다.\n다음은 object 레벨에서 help 명령어를 사용한 경우의 결과이다.\n$ opmate help usage: opmate \u0026lt;object\u0026gt; \u0026lt;action\u0026gt; [\u0026lt;arguments\u0026gt;|help] [objects] user Operator or service account that uses OPMATE with given roles. usergroup Group of OPMATE users. node Agent-installed server that is subject to operations management. nodegroup Group of OPMATE nodes. task Unit in which content to be executed on nodes is created. taskinstance Details of the executed-task. Execution status, result check, rerun etc. approval Approval of the OPMATE Task. file File to receive or send from Master Repository. system OPMATE System Information.\r특정 object 에서 수행가능한 action 을 확인하기 위해서는 다음과 같이 help 키워드를 사용할 수 있다.\n(user object의 action 목록을 출력한다.)\n$ opmate user help usage: opmate user \u0026lt;action\u0026gt; [\u0026lt;arguments\u0026gt;|help] [actions] list List information about users. view View user\u0026#39;s details. create Create user\u0026#39;s account. edit Edit user\u0026#39;s information. delete Delete user\u0026#39;s account. passwd Change or Set user\u0026#39;s password. login Create a user authentication session. logout Destroy a user authentication session.\r해당 action 에서 사용할 수 있는 option의 목록은 다음과 같이 확인할 수 있다. (user object의 list action에 해당되는 arguments 목록을 출력한다.)\n$ opmate user list help usage: opmate user list [-id \u0026lt;substring\u0026gt;] [-nm \u0026lt;substring\u0026gt;] [-ro \u0026lt;role-num\u0026gt;] [-st \u0026lt;E|D\u0026gt;] [-lm \u0026lt;number\u0026gt;] [-of \u0026lt;number\u0026gt;] List information about users. -id,--id \u0026lt;substring\u0026gt; Filter by ID -nm,--name \u0026lt;substring\u0026gt; Filter by name -ro,--role \u0026lt;role-num\u0026gt; Filter by role * 0 : Administrator * 1 : Manager * 2 : Operator * 3 : Guest -st,--status \u0026lt;E|D\u0026gt; Filter by status : Enable/Disable -lm,--limit \u0026lt;number\u0026gt; Maximum number of rows -of,--offset \u0026lt;number\u0026gt; First row number, starting at 0\r이와 같이 OPMATE CLI 는 help 키워드를 통해서 사용법을 확인하고 직관적으로 사용할 수 있도록 단순한 커맨드 조합으로 구성되어 있다.\n인자(arguments) usage: opmate user create -id \u0026lt;user-id\u0026gt; -nm \u0026lt;name\u0026gt; -pn \u0026lt;phone-num\u0026gt; -ea \u0026lt;email-address\u0026gt; [-de \u0026lt;free-text\u0026gt;] Create user\u0026#39;s account. -id,--id \u0026lt;user-id\u0026gt; User ID -nm,--name \u0026lt;name\u0026gt; User name -pn,--phone \u0026lt;phone-num\u0026gt; Phone number -ea,--email \u0026lt;email-address\u0026gt; E-mail Address -de,--desc \u0026lt;free-text\u0026gt; Description\rarguments 는 위의 예시 중 -ea 와 --email 과 같이 short/long arguments name 형태로 제공된다. 두가지 방식 모두 동일하게 동작하며 사용자의 취향에 따라 선택하여 사용 가능하다. (Short : Single Dash, Long : Double Dash)\n또한, 필수 항목과 선택 항목이 있으며, 선택 항목의 경우 usage에 [-de \u0026lt;free-text\u0026gt;]와 같이 [...] 로 표시된다.\n상세조회 (view action) view 명령은 특정 object의 지정한 ID(key)에 해당하는 상세정보를 출력한다.\nID는 중복을 허용하지 않는 Unique 한 값이며, 사용자가 입력한 ID로 OPMATE에 등록된 object를 조회하여 그에 해당하는 상세 정보를 출력한다. (일부 상세정보가 필요치 않은 object에 대해서는 view 명령을 제공하지 않는다.)\n다음의 예시와 같이 view 명령의 결과는 FIELD/VALUE 의 쌍으로 출력되며, 좌측은 FIELD(항목명)를 우측은 VALUE(값)을 보여준다.\n$ opmate user view -id bumbee +-------------+------------------+ | FIELD | VALUE | +-------------+------------------+ | ID | bumbee | | NAME | Bumblebee | | EMAIL | bumbee@email.com | | PHONE | 010-2222-2222 | | ROLE | 2 | | STATUS | enable | | DESCRIPTION | | | LAST LOGIN | 2020/03/11 15:12 | | CREATED AT | 2020/03/06 13:48 | | CREATED BY | | | UPDATED AT | 2020/03/06 13:48 | | UPDATED BY | | +-------------+------------------+\r목록조회 (list action) list 명령은 특정 object 에 등록된 목록을 출력한다.\nlist 명령은 각종 인자와 같이 사용가능 하며, 인자 항목에 따라서 전체일치 또는 부분일치로 검색된다.\n조회 결과는 기본 30건까지만 출력되지만, 아래의 옵션을 지정하여 전체 목록 중 부분 출력(페이징)도 가능하다.\n-lm(\u0026ndash;limit) : 조회 건수를 지정한다. 지정하지 않으면 30건(default 30) 출력하고, 0을 입력하면 전체 목록을 출력한다.\n-of(\u0026ndash;offset) : 조회의 시작점을 지정한다. 지정하지 않으면 첫번째 항목(default 0)부터 출력하고, 양의 정수를 입력하면 해당 항목부터 출력한다.\nlimit와 offset 옵션을 통해서 \u0026ldquo;특정 항목부터(offset) 몇 개(limit)\u0026rdquo; 의 형태로 출력을 지정할 수 있다.\n다음의 예시와 같이 list 명령의 결과는 Grid 형태로 출력되며, 상단(첫 줄)에 항목명을 출력하고 이하에는 조회된 목록을 출력한다. 출력된 결과의 최하단에는 \u0026ldquo;출력건수/전체건수\u0026rdquo; 의 형식으로 조회의 결과 건수가 출력된다.\n$ opmate user list -st E +--------+---------------+------+--------+------------------+ | ID | NAME | ROLE | STATUS | LAST LOGIN | +--------+---------------+------+--------+------------------+ | admin | admin | 0 | enable | 2020/03/13 14:07 | | oprim | Optimus Prime | 1 | enable | 2020/03/13 09:35 | | bumbee | Bumblebee | 2 | enable | 2020/03/11 15:12 | +--------+---------------+------+--------+------------------+ ROWS COUNT : 3/3\r","date":"0001-01-01","id":47,"permalink":"/hugo-test2/v11/manual/usermanual9/","summary":"\u003ch2 id=\"cli-사용법\"\u003eCLI 사용법\u003c/h2\u003e\n\u003cp\u003e사용자가 명령을 실행하기 위한 클라이언트 프로그램인 OPMATE CLI*(Command Line Interface)*의 사용법을 개략적으로 설명한다.\u003c/p\u003e\n\u003cp\u003eCLI 명령어는 운영체제의 쉘에서 제공하는 다양한 명령어들과 적절히 결합하여, 연속적인 질의를 하거나 원하는 결과 만을 취합하는 형태로의 사용이 가능하다.\n\u003cem\u003e(리눅스의 쉘스크립트 파일 내에서 사용 가능)\u003c/em\u003e\u003c/p\u003e","tags":[],"title":"별첨  1. CLI 사용법"},{"content":"스크립트내 예약어 이번 장에서는 OPMATE 태스크의 스크립트 작성 시에 사용할 수 있는 예약어의 종류와 사용법에 대해서 간략히 소개한다.\n스크립트에서 다음과 같은 형식으로 예약어를 사용할 수 있으며, 이는 태스크 수행 직전에 스크립트에서 기술한 예약어를 특정 값으로 치환하고 수행하게 된다.\n@OPM_ATTR.Key@\n예약어의 처음과 끝에는 @ 문자를 사용하며, OPM_ATTR. 은 OPMATE의 속성임을 나타낸다.\nKey 부분에 정의된 속성명을 입력하여 사용하게 된다. (사용자는 위의 형식 중 Key 부분을 제외하고 동일하게 작성해야 한다.)\n스크립트에서 사용 가능한 예약어는 크게 세 종류로 구분되며, 각각에 대해서는 아래에서 설명하고 있다.\n1. 주요 속성 값 OPMATE 의 노드, 태스크에서 Key로 사용되는 주요한 속성들 중에서 일부를 예약어로 제공하고 있다.\n다음은 현재 OPMATE에서 제공되는 예약어의 목록이다.\n@OPM_ATTR.AGENT_GUID@ : 태스크가 수행되는 에이전트의 GUID.(노드 식별을 위해 OPMATE에서 부여한 고유값)\n@OPM_ATTR.NODE_ID@ : 태스크가 수행되는 에이전트의 노드ID.(노드 식별을 위해 사용자가 부여한 고유값)\n@OPM_ATTR.TASK_ID@ : 스크립트를 등록한 태스크의 ID.\n@OPM_ATTR.TASK_INSTANCE_NO@ : 스크립트 수행 시에 부여되는 태스크 인스턴스 번호. 모든 태스크의 수행에 대해서 고유(Unique)한 값.\n다음의 예제에서는 스크립트 수행의 결과를 특정 위치에 파일로 출력하고 있다. 이때, OPMATE 의 주요 속성 값을 나타내는 예약어를 스크립트 내에서 사용하여 파일명이 중복되지 않도록 하는 용도로 사용하고 있다.\n#!/bin/sh 중략... NODE_ID=@OPM_ATTR.NODE_ID@ TASK_ID=@OPM_ATTR.TASK_ID@ TASK_INSTANCE_NO=@OPM_ATTR.TASK_INSTANCE_NO@ echo \u0026#34;Result File\u0026#34; \u0026gt; /tmp/${NODE_ID}.${TASK_ID}.${TASK_INSTANCE_NO} 중략... exit 0\r2. 파일 전송 토큰 파일배포/수집 시에 보안성을 강화하기 위한 장치로서 사용되어, 파일 관련 유틸리티를 태스크 내에서만 사용할 수 있도록 한다.\n다음과 같이 스크립트 내에서 사용해야 한다. (모든 문자가 아래와 일치해야 정상적으로 치환되며, 파일 관련 유틸리티 수행이 가능하다.)\n@OPM_ATTR.FILE_TOKEN@\n자세한 내용은 매뉴얼의 \u0026ldquo;8. 파일배포/수집\u0026rdquo; 항목에서 기 설명하고 있으므로, 여기서는 생략하도록 한다.\n3. 노드 그룹 속성(Attribute) 노드 그룹에 부여한 속성(Attribute)을 스크립트 내에서 사용하기 위함이다.\n다음과 같은 형식으로 스크립트에서 사용한다. AttributeKey 부분을 노드그룹에서 정의된 Key로 사용하면 된다.\n@OPM_ATTR.AttributeKey@\n좀 더 자세한 내용은 앞서 설명한 \u0026ldquo;5. 노드 그룹\u0026rdquo; 항목을 참고하기 바란다.\n","date":"0001-01-01","id":48,"permalink":"/hugo-test2/v11/manual/usermanual10/","summary":"\u003ch2 id=\"스크립트내-예약어\"\u003e스크립트내 예약어\u003c/h2\u003e\n\u003cp\u003e이번 장에서는 OPMATE 태스크의 스크립트 작성 시에 사용할 수 있는 예약어의 종류와 사용법에 대해서 간략히 소개한다.\u003c/p\u003e\n\u003cp\u003e스크립트에서 다음과 같은 형식으로 예약어를 사용할 수 있으며, 이는 태스크 수행 직전에 스크립트에서 기술한 예약어를 특정 값으로 치환하고 수행하게 된다.\u003c/p\u003e","tags":[],"title":"별첨 2. 스크립트내 예약어"},{"content":"사용자 (User) 사용자는 다음과 같은 정보를 가진다.\n사용자ID, 비밀번호, 이름, 역할, 휴대전화, 이메일, 설명, 활성상태\n역할 (Role) 사용자는 다음과 같은 종류의 역할(Role)을 가질 수 있으며, 역할에 따라 수행 가능한 작업의 범위가 달라진다.\n역할 레벨 작업 권한 관리자 0 시스템 전체 운영을 위한 각종 변경을 할 수 있다. 승인자 1 작업자가 수행하는 작업에 대해 승인 권한을 갖는다. 작업자 2 태스크를 정의하고 실행하기 위한 권한을 갖는다. 관람자 3 조회 위주의 작업만 가능하다. 관리자의 권한 레벨이 가장 높으며, 순서대로 낮은 레벨을 갖는다. 상위 권한 레벨은 하위 권한 레벨이 가능한 작업을 수행할 수 있다.\n사용자 추가와 변경 사용자 추가 요청은 별도의 인증 과정없이 할 수 있다. 하지만, 요청된 새롭게 추가된 사용자는 관리자가 별도로 활성화해야 사용(로그인 등)이 가능해진다.\n사용자 정보는 자신 또는 관리자가 변경할 수 있다. 단, 사용자의 활성상태와 역할을 변경하거나, 사용자를 삭제하는 작업은 관리자만 가능하다.\n사용자 그룹 (User Group) 사용자 그룹은 여러명의 사용자가 모여있는 집합이다. 주로 다수의 사용자들을 동시에 지정하기 위한 용도로 사용되며, 한명의 사용자는 동시에 여러개의 사용자 그룹에 소속될 수 있다.\n사용자 그룹의 생성은 작업자 이상의 권한을 가지고 있으면 가능하고, 생성한 사용자가 해당 그룹의 소유자(Owner)가 된다.\n하나의 사용자 그룹은 다음과 같은 정보로 구성된다.\n사용자그룹ID, 설명, 소유자(Owner), 포함 사용자\n소유자는 그룹의 각종 속성, 소속 사용자 등을 변경하거나 삭제할 수 있으며, 소유자를 다른 사용자로 변경할 수도 있다.\n노드 (Node) 노드는 운영 관리의 대상이 되는 서버로서, 에이전트가 설치되어 있는 것을 의미한다.\n하나의 노드는 다음과 같은 속성 정보를 가진다.\n노드ID, GUID, 에이전트버젼, 호스트명, OS종류, 소유자(Owner), 활성상태\n노드 등록 노드는 별도의 등록 작업없이, 에이전트 후 처음 실행시 자동으로 등록된다.\n등록된 노드는 고유의 GUID가 자동으로 부여되고, 노드ID 역시 GUID와 유사하게 자동 부여된다.\n단, *소유자(Owner)*는 없고 비활성화 상태로 유지된다.\n노드 정보 변경 신규 등록된 노드를 정상적으로 사용하기 위해서는 먼저 활성화해야 한다.\n자동으로 할당된 노드ID는 사용시 너무 길어 불편할 수 있기 때문에, 일반적으로 서버의 호스트명으로 변경한다. 하지만, 호스트명은 중복될 가능성이 있기 때문에, 노드ID도 중복되어 변경이 실패할 수 있다. 이러한 경우, 호스트명과 다른 문자를 조합하여 고유한 노드ID로 부여하는 것을 권장한다.\n소유자가 지정되지 않은 노드는 작업자 이상의 권한을 가지고 있는 사용자가 변경할 수 있다. 이때, 별도로 지정하지 않는다면 처음 변경한 사용자가 해당 노드의 **소유자(Owner)**가 된다.\n소유자는 노드의 정보를 변경할 수 있으며, 소유자를 다른 사용자로 변경할 수도 있다. 단, 노드의 삭제와 비활성화는 관리자만 가능하다.\n노드 비활성화 노드를 비활성화하면 해당 노드가 태스크의 대상 노드(Target Node)로 등록되어 있더라도, 태스크 실행시에 대상에서 제외된다. 특수한 상황으로 인하여, 해당 노드에 어떠한 태스크라도 수행되는 것을 막고 싶을 경우에 유용하다.\n노드 그룹 (Node Group) 노드 그룹은 여러개의 노드가 모여있는 집합이다. 태스크를 정의할때 다수 노드를 쉽게 추가하기 위해 사용할 수 있으며, 공통 속성을 정의하기 위해 사용할 수 있다. 하나의 노드는 여러개의 노드 그룹에 소속될 수 있다.\n노드 그룹을 생성/수정/삭제하기 위해서는 사용자의 권한레벨 1 이상이 필요하다.\n하나의 노드 그룹은 다음과 같은 정보로 구성된다.\n노드그룹ID, 설명, 속성(Attribute), 포함 노드\n그룹에 소속된 모든 노드에 공통적으로 적용할 속성(Attribute)을 정의할 수 있다. 예를 들어, 특정 그룹에 TOMCAT_HOME=/home/tomcat 와 같은 속성을 정의하면 소속된 모든 노드의 속성으로 동일하게 적용되며, 스크립트에 해당 속성의 치환 변수(@OPM_ATTR.속성명@)가 사용되었을 경우 정의된 값으로 치환된다.\n#!/bin/sh @OPM_ATTR.TOMCAT_HOME@/bin/startup.sh\r#!/bin/sh /home/tomcat/bin/startup.sh\r태스크 (Task) 태스크는 하나 이상의 노드를 대상으로 동일한 작업(스크립트)을 동시에 실행하기 위한 작업 정의서이다.\n태스크의 생성은 작업자 이상의 권한을 가지고 있으면 가능하고, 생성한 사용자가 해당 태스크의 소유자(Owner)가 된다.\n소유자는 태스크 정의를 변경하거나 삭제할 수 있으며, 소유자를 다른 사용자로 변경할 수도 있다.\n태스크의 주요 구성 정보는 다음과 같다.\n태스크ID, 스크립트(Script), 대상 노드(Target Node), 스케쥴(Schedule), 실행 방식, 실행 권한, 다음 태스크(Next Task), 소유자(Owner)\n스크립트 (Script) 스크립트가 기술된 파일(bash 쉘스크립트 파일 등)과 해당 스크립트를 실행할 사용자명(OS의 계정명)을 등록한다.\n대상 노드 (Target Node) 태스크가 실행되기 원하는 대상 노드를 지정한다. 노드 또는 노드그룹으로 추가할 수 있다.\n스케쥴 (Schedule) 태스크가 자동으로 실행될 시점을 정의한다. 다음과 같이 주기에 따른 값을 지정할 수 있다.\n주기 지정값 비고 매시 mm분 mm : 00 ~ 59 매일 hh시 mm분 hh : 00 ~ 23 매주 d요일 hh시 mm분 d : 0(일) ~ 6(토) 매월 DD일 hh시 mm분 DD : 01 ~ 31 매년 MM월 DD일 hh시 mm분 MM : 01 ~ 12 한번 YYYY년 MM월 DD일 hh시 mm분 YYYY : 2000~9999 실행 방식 태스크를 실행하는 방식은 다음 3가지이며, 각각 활성화(enable)/비활성화(disable) 할 수 있다.\nBy 스케쥴러 등록된 스케쥴에 의해서 실행되는 방식 By 온디맨드 사용자가 직접 명령하여 바로 실행되는 방식 By 태스크 다른 태스크가 다음 태스크(Next Task)로 지정하여 실행되는 방식 실행 권한 사용자에 의한 온디맨드 실행방식과 다른 태스크에 의한 실행방식은 실행주체를 정의해줘야 실행이 가능해진다. 실행주체는 사용자(User), 사용자그룹(User Group), 태스크(Task)가 대상이 될 수 있다. 단, 태스크의 소유자(Owner)는 별도로 부여하지 않아도 실행이 가능하다.\n다음 태스크 (Next Task) 태스크 실행이 정상적으로 완료(모든 타겟노드의 실행결과가 성공)된 후 자동으로 다른 태스크가 실행되도록 하고 싶을 경우에 지정한다.\n단, 호출되는 태스크에서 실행 권한을 부여해줘야 한다. 예를 들어, A태스크가 B태스크를 Next Task로 실행하고자 한다면, B태스크의 권한설정에 A태스크를 실행 가능 태스크로 추가해야 한다.\n승인(Approval)과 리비젼(Revision) 신규로 추가되거나, 변경된 태스크는 작업본(리비젼 번호 0) 상태로만 존재하고, 실제로 실행되기 위해서는 승인 과정을 거쳐야 한다.\n승인은 태스크의 소유자가 검토자 권한을 가진 사용자에게 요청한다.\n검토자에 의해 승인된 태스크는 리비젼 번호가 갱신된다. 리비젼 번호는 1부터 시작하며 승인시마다 1씩 증가한다.\n태스크의 리비젼 목록을 조회할 수 있으며, 리비젼 번호를 지정하여 해당 리비젼의 태스크 정의를 조회할 수 있다.\n태스크 인스턴스 (Task Instance) 태스크를 실행하면, 실행마다 새로운 태스크 인스턴스가 생성된다.\n하나의 태스크 인스턴스는 전체 태스크에서 유일한 태스크 인스턴스 번호 (Task Instance No) 가 부여된다.\n노드별 상세 태스크 인스턴스 번호와 노드를 지정하면 태스크 인스턴스의 노드별 상세를 확인할 수 있다. 각 노드별로 다음과 같은 속성값을 가지고 있다.\n진행 상태 준비 : 노드에 아직 실행 요청을 보내기 전 상태 요청(실행중) : 노드에 실행 요청을 보낸 상태 완료 : 노드가 스크립트를 수행하고 실행 결과를 회신한 상태 실패 : 기타 이유(e.g. 스크립트 다운로드 불가 등)로 스크립트를 실행도 못한 경우 실행 결과 N/A 성공 : 스크립트의 실행 결과 코드가 0 인 경우 실패 : 진행 상태가 실패이거나, 스크립트의 실행 결과 코드가 0 이 아닌 경우 실행 결과 코드 스크립트의 최종 종료값 표준출력/표준에러 스크립트 실행 중 발생한 표준출력과 표준에러 노드 단위 재실행 이미 생성된 태스크 인스턴스에 대하여, 특정 노드를 지정하여 노드 단위로 재실행할 수 있다.\n단, 태스크 인스턴스의 생성 시점 이후에 태스크의 리비젼이 변경되었을 경우 재실행은 불가하다.\n파일 배포/수집 유틸리티 노드별로 설치되는 에이전트에 포함된 유틸리티이며, 스크립트에 기술하여 실행할 수 있다.\n마스터 서버가 아닌, 노드 입장에서 마스터 파일 리파지토리에 업로드하거나, 마스터 파일 리파지토리에서 다운로드하는 방식이다.\n리파지토리에 저장된 파일은 일정 기간이 지나면 자동으로 삭제된다. 따라서, 리파지토리는 보관의 용도가 아닌, 대량의 파일 수집과 배포를 위한 임시 공간의 용도로 사용한다.\n파일 배포 마스터 서버의 파일을 노드에 배포할 경우에 사용한다.\n다음 예제는, 마스터 서버 리파지토리의 /mydir/install-tomcat-1.0.tar.gz 파일을 받아와 노드의 /home/was/install-tomcat-1.0.tar.gz 에 저장하는 명령이다.\n$ opmfget master:/mydir/install-apache.tar.gz /home/web/install-apache.tar.gz\n파일 수집 노드의 파일을 마스터 서버로 수집할 경우에 사용한다.\n다음 예제는, 노드의 /home/web/apache/conf/server.cfg 파일을 마스터 서버 리파지토리의 /mydir/node1/server.cfg 에 저장하는 명령이다.\n$ opmfput master:/mydir/node1/server.cfg /home/web/apache/server.cfg\n","date":"0001-01-01","id":49,"permalink":"/hugo-test2/v10/manual/manual/","summary":"\u003ch2 id=\"사용자-user\"\u003e사용자 (User)\u003c/h2\u003e\n\u003cp\u003e사용자는 다음과 같은 정보를 가진다.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e사용자ID, 비밀번호, 이름, 역할, 휴대전화, 이메일, 설명, 활성상태\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"역할-role\"\u003e역할 (Role)\u003c/h3\u003e\n\u003cp\u003e사용자는 다음과 같은 종류의 역할(Role)을 가질 수 있으며, 역할에 따라 수행 가능한 작업의 범위가 달라진다.\u003c/p\u003e","tags":[],"title":"사용자 매뉴얼 (v1.0)"}]